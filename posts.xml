<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Jian Wei Cheong</title>
<link>https://jianweicheong.codeberg.page/posts.html</link>
<atom:link href="https://jianweicheong.codeberg.page/posts.xml" rel="self" type="application/rss+xml"/>
<description>Personal page of Jian Wei Cheong</description>
<generator>quarto-1.7.6</generator>
<lastBuildDate>Tue, 30 Apr 2024 16:00:00 GMT</lastBuildDate>
<item>
  <title>Life as an entropic conspiracy</title>
  <link>https://jianweicheong.codeberg.page/posts/life-conspiracy.html</link>
  <description><![CDATA[ 




<section id="the-right-question-to-ask" class="level1 page-columns page-full">
<h1>The right question to ask</h1>
<blockquote class="blockquote">
<p>“What is the meaning of life?”</p>
</blockquote>
<p>This question has become quite a cliché, with an equally cliché answer of:</p>
<blockquote class="blockquote">
<p>“It’s whatever you make it out to be!”</p>
</blockquote>
<p>that has become the norm, that we all are quite tired of.</p>
<p>I believe the reason why such a cop-out answer is the norm is because deep down, we all understand that life has no intrinsic objective meaning<sup>1</sup>. In fact, given that the prerequisite for the concept of “meaning” to exist in the first place is the existence of life itself, this question seems rather like a trick question.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Sans whatever religious/spiritual beliefs that one might have.</p></div><div id="fn2"><p><sup>2</sup>&nbsp;e.g., the aforementioned religious/spiritual beliefs.</p></div></div><p>Similar to how a system cannot demonstrate its own consistency in Gödel’s second incompleteness theorem, perhaps one must require a framework that is external to life itself to apply “meaning” for life’s existence, before life’s existence<sup>2</sup>.</p>
<p>Nevertheless, by replacing the quite human term of “meaning” with a more mechanistic term like “purpose”, we might be able to answer more reasonably the resulting question of:</p>
<blockquote class="blockquote">
<p>“What is the <strong>purpose</strong> of life?”</p>
</blockquote>
</section>
<section id="a-physicists-perspective-the-conspiracy" class="level1 page-columns page-full">
<h1>A Physicist’s perspective — the conspiracy</h1>
<p>The study of life is typically assumed to fall under the domain of Biology. However, physicists have also been attempting to uncover a physical principle that leads to life’s emergence and its behaviors <span class="citation" data-cites="PrigogineBiological1971">(Prigogine and Nicolis 1971)</span>. A hint lies in the stark difference between life and inanimate matter: life’s ability to efficiently absorb or consume useful energy and dissipating it as heat, resulting in increased entropy production.</p>
<p>While this have been pointed out by Erwin Schrödinger in his seminar book <a href="https://en.wikipedia.org/wiki/What_Is_Life%3F"><em>What is life?</em></a> back in the 1940s, it has undergone rigorous thermodynamic treatment in recent years, thanks to advances in the physics of non-equilibrium thermodynamics <span class="citation" data-cites="CollinVerification2005 MichaelianThermodynamic2011">(Collin et al. 2005; K. Michaelian 2011)</span>.</p>
<p>In short, in the presence of an external non-equilibrium energy source (like the Sun), systems adapt and self-organize themselves to better absorb energy and dissipate heat or entropy. This process has come to be known as <em>dissipation-driven adaptation</em> <span class="citation" data-cites="EnglandStatistical2013 PerunovStatistical2016">(England 2013; Perunov, Marsland, and England 2016)</span>.</p>
<p>Life is hypothesized to be such a dissipative system that serves to increase entropy production.</p>
<p>From the birth of planetoids in the dusts of protoplanetary disks to the formation of vortices we see in chaotic turbulent flows such as hurricanes. Stable structures with low internal entropy arise out of such chaotic interactions in order to more efficiently dissipate entropy.</p>
<p>Life might be one of such order out of chaos, a long-running, universe-scale conspiracy to increase the entropy of the cosmos.</p>
<section id="self-organization-order-out-of-chaos" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="self-organization-order-out-of-chaos">Self-organization — order out of chaos</h2>
<p>Self-organization of complex structures in the presence of an external energy source have been demonstrated both experimentally and computationally. In a computational simulation involving 20 particles in a simplified chemical space, complex bonding patterns emerged under resonance with a periodic drive, increasing the rate of work absorption and heat dissipation <span class="citation" data-cites="KachmanSelfOrganized2017">(Kachman, Owen, and England 2017)</span>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/kondepudi.png" class="img-fluid figure-img"></p>
<figcaption>Reprinted from <span class="citation" data-cites="KondepudiEnddirected2015">Kondepudi, Kay, and Dixon (2015)</span></figcaption>
</figure>
</div>
<p>Setup and result of self-organizing conducting beads.</p>
</div></div><p>Experimentally, conducting beads 4mm in diameter immersed in oil in a petri dish were shown to self-organize to a complex, tree-like structure when subjected to a high voltage. This occured at a critical point and was accompanied by a spike in entropy dissipation <span class="citation" data-cites="KondepudiEnddirected2015">(Kondepudi, Kay, and Dixon 2015)</span>. Silver nanorods were also observed to self-organized in the presence of a doughnut-shaped laser source, with resulting structures depending on the wavelengths and polarization of the laser source <span class="citation" data-cites="ItoSelective2013">(Ito et al. 2013)</span>.</p>
<p>Likewise, by considering UVC light of 230nm to 270nm from the Sun as the non-equilibrium energy source (a range of wavelengths that were most intense in the early Earth), it was demonstrated that RNA polymers could proliferate via photochemical reactions, and that DNA polymers would denature from absorption and dissipation at these UVC wavelengths. These are crucial steps for self-replication without enzymes <span class="citation" data-cites="MichaelianMicroscopic2017 MichaelianUVC2019">(Karo Michaelian 2017; Karo Michaelian and Padilla 2019)</span>.</p>
<p>Homochirality in DNA and RNA was also shown to be achieved via photochemical reactions with UVC wavelengths light <span class="citation" data-cites="MichaelianHomochirality2018">(Karo Michaelian 2018)</span>. Correlations also exist between the maximum absorbance wavelengths of early life’s nucleobases and amino acids, and UVC wavelengths <span class="citation" data-cites="MichaelianFundamental2015">(K. Michaelian and Simeonov 2015)</span>.</p>
<p>These findings suggest that in the RNA world during early Earth era, RNA or pre-RNA polymers may have self-organized or adapted to efficeintly absorb and dissipate UVC solar spectrum, a prime example of dissipative adaptation in the emergence of life.</p>
</section>
<section id="self-replication-the-more-the-merrier" class="level2">
<h2 class="anchored" data-anchor-id="self-replication-the-more-the-merrier">Self-replication — the more the merrier</h2>
<p>Clearly, the more dissipators there are in a system, the greater the overall entropic dissipation. It’s therefore unsurprising that complex systems can self-replicate to increase entropy dissipation.</p>
<p>In fact, even the act of self-replication itself can serves to dissipate heat, e.g., it was shown that <em>E. coli</em> bacteria dissipate at least 5 times as much heat during replication compared to individual heat dissipation <span class="citation" data-cites="EnglandStatistical2013">(England 2013)</span>.</p>
<p>The process of DNA replication (copolymerisation) also dissipates entropy depending on the information entropy of the DNA polymer. Information creation decreases the Shannon entropy of the polymer and generates mutual information with the original. In the process, entropy is dissipated to the environment as quantified by the affinity per copied nucleotide <span class="citation" data-cites="AndrieuxNonequilibrium2008">(Andrieux and Gaspard 2008)</span>.</p>
<p>In general, various dissipative systems exhibit self-replication behaviors. For example, computer simulations of colloidal clusters show that the exponential growth rates of self-replication varies with the energy landscape of the system <span class="citation" data-cites="ZeravcicSelfreplicating2014">(Zeravcic and Brenner 2014)</span>.</p>
<p>Three-dimensional vortices also self-replicates in rotating shear flows, as demonstrated in a numerical study <span class="citation" data-cites="MarcusThreeDimensional2013">(Marcus et al. 2013)</span>. This was also proposed to be how planetoids form in protoplanetary disks <span class="citation" data-cites="BarrancoThreeDimensional2005">(Barranco and Marcus 2005)</span>, whereby the larger system can replicate smaller dissipative systems in it, or eventually split into a copy or more of itself, i.e., disk fragmentation that forms binary star systems <span class="citation" data-cites="OffnerFormation2010">(Offner et al. 2010)</span>.</p>
<p>Given these observations, one might hypothesize that early organic compounds evolved the ability to self-replicate as a means to ensure the constant presence of entropy dissipating structures, driving the emergence and evolution of life.</p>
</section>
<section id="adaptation-resonance-with-the-environment" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="adaptation-resonance-with-the-environment">Adaptation — resonance with the environment</h2>
<p>If life indeed self-organizes to more efficiently absorb external energy sources and dissipate heat, we would expect it to adapt or change its structures in response to changes in those energy sources over time.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/michaelian.png" class="imghover img-fluid figure-img"></p>
<figcaption>Reprinted from <span class="citation" data-cites="MichaelianFundamental2015">K. Michaelian and Simeonov (2015)</span></figcaption>
</figure>
</div>
<p>Correlations between solar spectrum and the emergence of organic compounds and cells in the five different periods. As Earth’s conditions changes, more complex organic compounds evolved to suit these conditions. The general trends are a shift from UVC absorbing to visible spectrum absorbing compounds, and a shift to oxygen based respiration.</p>
</div></div><p>This seems to be evident throughout life’s history, where its evolution has underwent avalanche dynamics with quick and sudden changes in complexity rather than smooth and gradual evolution <span class="citation" data-cites="PaczuskiAvalanche1996">(Paczuski, Maslov, and Bak 1996)</span>. Some even modeled these sudden transitions of evolution as a Big Bang model with “evolutionary inflation” akin to the cosmological inflation model <span class="citation" data-cites="KooninBiological2007">(Koonin 2007)</span>. Simulated artificial life have also demonstrated how the fitness or how the population adapts to the environment, can undergo multiple discontinuous jumps <span class="citation" data-cites="AdamiSelforganized1995">(Adami 1995)</span>.</p>
<p>Correlating Earth’s historical environmental changes (like solar spectrum, temperature, and atmospheric compositions) with organic compounds’ emergence and evolution shows that life has consistently adapted to better survive and absorb energy according to the prevailing condition in that period <span class="citation" data-cites="MichaelianFundamental2015">(K. Michaelian and Simeonov 2015)</span>.</p>
<p>An interesting example is the case of adenosine triphosphate (ATP) synthase, an enzyme that lies along the cell membrane of a cell that breaks down ATP to adenosine diphosphate (ADP) and a phosphate. This breakage releases energy that powers the cell.</p>
<p>Using a kinetic model of the ATP synthase process reveals that both its entropy production and the Shannon entropy of the transitional states, are maximized at a catalytic dwell angle<sup>3</sup> consistent with the actual ATP synthase’s angle, indicating that the ATP synthase evolved to optimize entropy production <span class="citation" data-cites="DewarFunctional2006">(Dewar, Juretić, and Županović 2006)</span>.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;The ATP synthase rotates in angles of <img src="https://latex.codecogs.com/png.latex?120%5E%7B%5Ccirc%7D"> for each ATP to ADP + P<img src="https://latex.codecogs.com/png.latex?_i"> reaction. However, at the moment of breakage of ATP bonds to ADP + P<img src="https://latex.codecogs.com/png.latex?_i">, the synthase will pause for a short amount of time of around 2ms <span class="citation" data-cites="UenoATP2005">(Ueno et al. 2005)</span>. The angle at which this pause happens is known as the catalytic dwell.</p></div></div><p>These might findings suggest that the process of self-organization to an external energy source is an ongoing, dynamic phenomenon that continues in response to changing conditions.</p>
</section>
</section>
<section id="the-purpose-of-life" class="level1">
<h1>The purpose of life</h1>
<p>So why does the universe favors orders such as life, rather than simply maintaining the disorder that we might expect?</p>
<p>As discussed, it turns out that these eddies of order and low entropy pockets of the universe such as life, are but a small price for the universe to pay to optimize the production of entropy in the long run.</p>
<p>In other words, contrary to what one might expect, the presence of stable complex structures such as life produces more entropy in the system than if these structures were absent.</p>
<p>So it seems that the conspiracy of life is an entropic one.</p>
<p>This long-running conspiracy is but an attempt to speed up and maximize the production of entropy and disorder. The universe has set aside a small part of itself for us, masquerading as an exception to the Second Law of thermodynamics, but is in fact a testament of its power.</p>
<p>This is the purpose of life, the unwitting servitude as an agent of entropy.</p>



</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-AdamiSelforganized1995" class="csl-entry">
Adami, C. 1995. <span>“Self-Organized Criticality in Living Systems.”</span> <em>Physics Letters A</em> 203 (1): 29–32. <a href="https://doi.org/10.1016/0375-9601(95)00372-a">https://doi.org/10.1016/0375-9601(95)00372-a</a>.
</div>
<div id="ref-AndrieuxNonequilibrium2008" class="csl-entry">
Andrieux, David, and Pierre Gaspard. 2008. <span>“Nonequilibrium Generation of Information in Copolymerization Processes.”</span> <em>Proceedings of the National Academy of Sciences</em> 105 (28): 9516–21. <a href="https://doi.org/10.1073/pnas.0802049105">https://doi.org/10.1073/pnas.0802049105</a>.
</div>
<div id="ref-BarrancoThreeDimensional2005" class="csl-entry">
Barranco, Joseph A., and Philip S. Marcus. 2005. <span>“Three‐dimensional Vortices in Stratified Protoplanetary Disks.”</span> <em>The Astrophysical Journal</em> 623 (2): 1157–70. <a href="https://doi.org/10.1086/428639">https://doi.org/10.1086/428639</a>.
</div>
<div id="ref-CollinVerification2005" class="csl-entry">
Collin, D., F. Ritort, C. Jarzynski, S. B. Smith, I. Tinoco, and C. Bustamante. 2005. <span>“Verification of the Crooks Fluctuation Theorem and Recovery of RNA Folding Free Energies.”</span> <em>Nature</em> 437 (7056): 231–34. <a href="https://doi.org/10.1038/nature04061">https://doi.org/10.1038/nature04061</a>.
</div>
<div id="ref-DewarFunctional2006" class="csl-entry">
Dewar, R. C., D. Juretić, and P. Županović. 2006. <span>“The Functional Design of the Rotary Enzyme ATP Synthase Is Consistent with Maximum Entropy Production.”</span> <em>Chemical Physics Letters</em> 430 (1–3): 177–82. <a href="https://doi.org/10.1016/j.cplett.2006.08.095">https://doi.org/10.1016/j.cplett.2006.08.095</a>.
</div>
<div id="ref-EnglandStatistical2013" class="csl-entry">
England, Jeremy L. 2013. <span>“Statistical Physics of Self-Replication.”</span> <em>The Journal of Chemical Physics</em> 139 (12). <a href="https://doi.org/10.1063/1.4818538">https://doi.org/10.1063/1.4818538</a>.
</div>
<div id="ref-ItoSelective2013" class="csl-entry">
Ito, Syoji, Hiroaki Yamauchi, Mamoru Tamura, Shimpei Hidaka, Hironori Hattori, Taichi Hamada, Keisuke Nishida, et al. 2013. <span>“Selective Optical Assembly of Highly Uniform Nanoparticles by Doughnut-Shaped Beams.”</span> <em>Scientific Reports</em> 3 (1). <a href="https://doi.org/10.1038/srep03047">https://doi.org/10.1038/srep03047</a>.
</div>
<div id="ref-KachmanSelfOrganized2017" class="csl-entry">
Kachman, Tal, Jeremy A. Owen, and Jeremy L. England. 2017. <span>“Self-Organized Resonance During Search of a Diverse Chemical Space.”</span> <em>Physical Review Letters</em> 119 (3). <a href="https://doi.org/10.1103/physrevlett.119.038001">https://doi.org/10.1103/physrevlett.119.038001</a>.
</div>
<div id="ref-KondepudiEnddirected2015" class="csl-entry">
Kondepudi, Dilip, Bruce Kay, and James Dixon. 2015. <span>“End-Directed Evolution and the Emergence of Energy-Seeking Behavior in a Complex System.”</span> <em>Physical Review E</em> 91 (5). <a href="https://doi.org/10.1103/physreve.91.050902">https://doi.org/10.1103/physreve.91.050902</a>.
</div>
<div id="ref-KooninBiological2007" class="csl-entry">
Koonin, Eugene V. 2007. <span>“The Biological Big Bang Model for the Major Transitions in Evolution.”</span> <em>Biology Direct</em> 2 (1): 21. <a href="https://doi.org/10.1186/1745-6150-2-21">https://doi.org/10.1186/1745-6150-2-21</a>.
</div>
<div id="ref-MarcusThreeDimensional2013" class="csl-entry">
Marcus, Philip S., Suyang Pei, Chung-Hsiang Jiang, and Pedram Hassanzadeh. 2013. <span>“Three-Dimensional Vortices Generated by Self-Replication in Stably Stratified Rotating Shear Flows.”</span> <em>Physical Review Letters</em> 111 (8). <a href="https://doi.org/10.1103/physrevlett.111.084501">https://doi.org/10.1103/physrevlett.111.084501</a>.
</div>
<div id="ref-MichaelianThermodynamic2011" class="csl-entry">
Michaelian, K. 2011. <span>“Thermodynamic Dissipation Theory for the Origin of Life.”</span> <em>Earth System Dynamics</em> 2 (1): 37–51. <a href="https://doi.org/10.5194/esd-2-37-2011">https://doi.org/10.5194/esd-2-37-2011</a>.
</div>
<div id="ref-MichaelianMicroscopic2017" class="csl-entry">
Michaelian, Karo. 2017. <span>“Microscopic Dissipative Structuring and Proliferation at the Origin of Life.”</span> <em>Heliyon</em> 3 (10): e00424. <a href="https://doi.org/10.1016/j.heliyon.2017.e00424">https://doi.org/10.1016/j.heliyon.2017.e00424</a>.
</div>
<div id="ref-MichaelianHomochirality2018" class="csl-entry">
———. 2018. <span>“Homochirality Through Photon-Induced Denaturing of RNA/DNA at the Origin of Life.”</span> <em>Life</em> 8 (2): 21. <a href="https://doi.org/10.3390/life8020021">https://doi.org/10.3390/life8020021</a>.
</div>
<div id="ref-MichaelianUVC2019" class="csl-entry">
Michaelian, Karo, and Norberto Santillán Padilla. 2019. <span>“UVC Photon-Induced Denaturing of DNA: A Possible Dissipative Route to Archean Enzyme-Less Replication.”</span> <em>Heliyon</em> 5 (6): e01902. <a href="https://doi.org/10.1016/j.heliyon.2019.e01902">https://doi.org/10.1016/j.heliyon.2019.e01902</a>.
</div>
<div id="ref-MichaelianFundamental2015" class="csl-entry">
Michaelian, K., and A. Simeonov. 2015. <span>“Fundamental Molecules of Life Are Pigments Which Arose and Co-Evolved as a Response to the Thermodynamic Imperative of Dissipating the Prevailing Solar Spectrum.”</span> <em>Biogeosciences</em> 12 (16): 4913–37. <a href="https://doi.org/10.5194/bg-12-4913-2015">https://doi.org/10.5194/bg-12-4913-2015</a>.
</div>
<div id="ref-OffnerFormation2010" class="csl-entry">
Offner, Stella S. R., Kaitlin M. Kratter, Christopher D. Matzner, Mark R. Krumholz, and Richard I. Klein. 2010. <span>“THE FORMATION OF LOW-MASS BINARY STAR SYSTEMS VIA TURBULENT FRAGMENTATION.”</span> <em>The Astrophysical Journal</em> 725 (2): 1485–94. <a href="https://doi.org/10.1088/0004-637x/725/2/1485">https://doi.org/10.1088/0004-637x/725/2/1485</a>.
</div>
<div id="ref-PaczuskiAvalanche1996" class="csl-entry">
Paczuski, Maya, Sergei Maslov, and Per Bak. 1996. <span>“Avalanche Dynamics in Evolution, Growth, and Depinning Models.”</span> <em>Physical Review E</em> 53 (1): 414–43. <a href="https://doi.org/10.1103/physreve.53.414">https://doi.org/10.1103/physreve.53.414</a>.
</div>
<div id="ref-PerunovStatistical2016" class="csl-entry">
Perunov, Nikolay, Robert A. Marsland, and Jeremy L. England. 2016. <span>“Statistical Physics of Adaptation.”</span> <em>Physical Review X</em> 6 (2). <a href="https://doi.org/10.1103/physrevx.6.021036">https://doi.org/10.1103/physrevx.6.021036</a>.
</div>
<div id="ref-PrigogineBiological1971" class="csl-entry">
Prigogine, I., and G. Nicolis. 1971. <span>“Biological Order, Structure and Instabilities.”</span> <em>Quarterly Reviews of Biophysics</em> 4 (2–3): 107–48. <a href="https://doi.org/10.1017/s0033583500000615">https://doi.org/10.1017/s0033583500000615</a>.
</div>
<div id="ref-UenoATP2005" class="csl-entry">
Ueno, Hiroshi, Toshiharu Suzuki, Kazuhiko Kinosita, and Masasuke Yoshida. 2005. <span>“ATP-Driven Stepwise Rotation of f o f 1 -ATP Synthase.”</span> <em>Proceedings of the National Academy of Sciences</em> 102 (5): 1333–38. <a href="https://doi.org/10.1073/pnas.0407857102">https://doi.org/10.1073/pnas.0407857102</a>.
</div>
<div id="ref-ZeravcicSelfreplicating2014" class="csl-entry">
Zeravcic, Zorana, and Michael P. Brenner. 2014. <span>“Self-Replicating Colloidal Clusters.”</span> <em>Proceedings of the National Academy of Sciences</em> 111 (5): 1748–53. <a href="https://doi.org/10.1073/pnas.1313601111">https://doi.org/10.1073/pnas.1313601111</a>.
</div>
</div></section></div> ]]></description>
  <category>physics</category>
  <guid>https://jianweicheong.codeberg.page/posts/life-conspiracy.html</guid>
  <pubDate>Tue, 30 Apr 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Haskell for numerical computation?</title>
  <link>https://jianweicheong.codeberg.page/posts/haskell-numerical.html</link>
  <description><![CDATA[ 




<section id="why-haskell" class="level1 page-columns page-full">
<h1>Why Haskell?</h1>
<p>Recently, I have been experimenting with <a href="https://en.wikipedia.org/wiki/Haskell">Haskell</a> which I find to be quite enjoyable to program in, thanks to its unique programming paradigm. So much so that I am considering using it for numerical computations in my research.</p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside"><strong>Side-effects</strong> refers to having an effect on the “outside world” such as printing a string to terminal or writing to a file etc. Of course, we do want some side-effects for the program to do anything useful. In Haskell, side-effects are handled by <a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)">monads</a>, which is a beast of a topic on its own. Monads allow the pure and impure (side-effects) to be clearly separated in Haskell.</span></div></div>
<p>Haskell (named after logician <a href="https://en.wikipedia.org/wiki/Haskell_Curry">Haskell Curry</a>) is a purely functional programming language in the mathematical sense. Every function in Haskell simply takes an input and returns an output—nothing more, nothing less. It cannot mutate variables, and it cannot produce <strong><em>side-effects</em></strong>.</p>
<p>Purely functional programming languages are typically declarative, i.e., one does not write step-by-step instructions like imperative languages such as Python, C, C++, etc. For example, there are no loops in Haskell; one has to rely on recursion or functions such as ‘fold’ and ‘scan’.</p>
<p>The two main reasons for my consideration to use it for numerical computations are:</p>
<ol type="1">
<li><p>Conciseness: Haskell’s declarative style greatly increase its conciseness. Prototyping and experimentation are frequent in computational research. Concise codes can reduce this programming time, and allow faster prototyping.</p></li>
<li><p>Safety and correctness: A small bug in numerical computational would not raise any error. Instead, it manifests in computed results or plots, masquerading as valid or even novel results. If these bugs are not identified, one might publish a paper with faux results.</p>
<ul>
<li>Haskell’s static typing can serve as an additional check to reduce bugs.</li>
<li>Its declarative approach means that codes are written in easily verifiable expressions, like in mathematics, rather than imperative statements that are often prone to bugs or human error.</li>
<li>Immutability and the absence of side-effects in functions can also reduce hidden bugs. For instance, the risk of a function modifying a variable without the coder’s knowledge is mitigated, and parallel computations are less likely to produce incorrect results due to variable mutations in multiple threads.</li>
</ul></li>
</ol>
<p>I am neither a software developer nor am I computer science trained, and so some technical aspects of the language might escape me. Therefore, in this article, we will only examine some simple examples to compare traditional imperative languages like Python with purely functional Haskell.</p>
</section>
<section id="some-examples" class="level1 page-columns page-full">
<h1>Some examples</h1>
<section id="sum-recursion" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="sum-recursion">Sum: recursion</h2>
<p>Ignoring the fact that the function <code>sum</code> is built-in in both Python and Haskell, let’s see how one might write a <code>sum</code> function that sum all the elements in a list.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(xs):</span>
<span id="cb1-2">    sum_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> xs:</span>
<span id="cb1-4">        sum_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> x</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sum_all</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> xs</span></code></pre></div>
</div>
</div>
</div>
<p>In the imperative Python example, we tell the program what to do step-by-step: first initialize an accumulator <code>sum_all</code> to 0, then loop through each elements in the list and add them to the accumulator.</p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">One might notice that functions are applied without parenthesis, i.e., applying a function <code>foo</code> on a variable <code>x</code>, is typically <code>foo(x)</code>, but would be <code>foo x</code> in Haskell. The reason for this has something to do with the concept of “currying” which we will see later.</span></div></div>
<p>On the other hand, in the declarative Haskell example, we state that the sum of a list is simply the first element <code>x</code> plus the sum of the rest of the elements <code>xs</code>. This will then carry on recursively. As with all recursive functions, we require a base case to end the recursion, which is specified by <code>sum [] = 0</code>, which states to return 0 if the input to <code>sum</code> is an empty list. This ability to define the <code>sum</code> function twice with <code>sum [] = 0</code> and <code>sum (x:xs) = x + sum xs</code>, is simply <a href="https://en.wikipedia.org/wiki/Pattern_matching">pattern matching</a>.</p>
<p>Finally, Haskell is statically typed, i.e., the types of the inputs and outputs of the function can be specified which in our case is <code>sum :: [Float] -&gt; Float</code>, which states that the function <code>sum</code> takes in a list of floats <code>[Float]</code> and returns a single float <code>Float</code>. This type declaration looks similar to how one might write <img src="https://latex.codecogs.com/png.latex?f:%20X%20%5Cto%20Y"> mathematically for a function <img src="https://latex.codecogs.com/png.latex?y%20=%20f(x)">, where <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20X">, and <img src="https://latex.codecogs.com/png.latex?y%5Cin%20Y">.</p>
</section>
<section id="tensor-product-reduction-and-accumulation" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="tensor-product-reduction-and-accumulation">Tensor product: reduction and accumulation</h2>
<p>Here is a common example in quantum information/computation, where we have some quantum states that are complex matrices, and we want to perform a tensor product on them so that we can operate on them collectively.</p>
<blockquote class="blockquote">
<p>Given a list of matrices, the function <code>tensor_all</code> returns the tensor product of all the elements of the list in sequence, e.g., given the list of matrices <img src="https://latex.codecogs.com/png.latex?Ms%20=%20%5BA,%20B,%20C%5D">, <code>tensor_all(Ms)</code> should return their tensor product <img src="https://latex.codecogs.com/png.latex?A%5Cotimes%20B%5Cotimes%20C">.</p>
</blockquote>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tensor_all(Ms):</span>
<span id="cb3-4">    tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> M <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Ms:</span>
<span id="cb3-6">        tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.kron(tensor_prod, M)</span>
<span id="cb3-7"></span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tensor_prod</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Numeric.LinearAlgebra</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">tensor_all ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span></span>
<span id="cb4-4">tensor_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foldl</span> kronecker <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
</div>
</div>
<p>Imperatively in the Python example, we loop through each element of the list and apply the tensor product (kronecker product <code>np.kron</code>) element-by-element with an accumulator, i.e., in the first loop we have <img src="https://latex.codecogs.com/png.latex?(1)%20%5Cotimes%20A">, in the second loop we have <img src="https://latex.codecogs.com/png.latex?(1%5Cotimes%20A)%20%5Cotimes%20B">, in the third loop we have <img src="https://latex.codecogs.com/png.latex?(1%5Cotimes%20A%20%5Cotimes%20B)%20%5Cotimes%20C">, and so on and so forth, where our accumulator <code>tensor_prod</code> is the value in the parenthesis, is initialized as <img src="https://latex.codecogs.com/png.latex?1">, and is updated every loop.</p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">Note we have used the <code>hmatrix</code> library which is imported by <code>import Numeric.LinearAlgebra</code>. <a href="https://pechersky.github.io/haskell-numpy-docs/">This documentation</a> is a good resource for a comparison between <code>hmatrix</code> and Python’s <code>numpy</code>.</span></div></div>
<p>In Haskell, it should be obvious that we can perform a recursion like the case for <code>sum</code>. However, here we introduced the function <code>foldl</code>, which stands for “fold left”. <code>foldl</code> takes in a binary function (in this case <code>kronecker</code>), the initial accumulator (in this case <code>1</code>), and a list (e.g., <code>[a, b, c]</code>). It then returns <code>kronecker(kronecker(kronecker(1, a), b), c)</code>. There is also <code>foldr</code>, or “fold right”, which instead returns <code>kronecker(a, kronecker(b, kronecker(c, 1)))</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Point-free style programming
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Note that in the Haskell example, we could have written the function as <code>tensor_all ms = foldl kronecker 1 ms</code>, where the input to the function, the list of matrices <code>ms</code>, is specified. However, since <code>ms</code> is simply the input to the corresponding functions on both sides of the expression, we can omit it and simply write <code>tensor_all = foldl kronecker 1</code>. This is referred to as <a href="https://en.wikipedia.org/wiki/Tacit_programming">point-free style programming</a>.</p>
</div>
</div>
</div>
<p>If instead, we want to “accumulate” the result of each loop into a list, i.e., we want the function to return <img src="https://latex.codecogs.com/png.latex?%5BA,%20A%20%5Cotimes%20B,%20A%5Cotimes%20B%5Cotimes%20C%5D">, then, in the Python example we have to append the accumulator <code>tensor_prod</code> in each loop into a list. On the other hand, in the Haskell example, we can simply replace <code>foldl</code> with <code>scanl</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tensor_all(Ms):</span>
<span id="cb5-4">    tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-5">    tensor_prod_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> M <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Ms:</span>
<span id="cb5-7">        tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.kron(tensor_prod, M)</span>
<span id="cb5-8">        tensor_prod_list.append(tensor_prod)</span>
<span id="cb5-9"></span>
<span id="cb5-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tensor_prod_list</span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Numeric.LinearAlgebra</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">tensor_all ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>]</span>
<span id="cb6-4">tensor_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scanl</span> kronecker <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
</div>
</div>
<p>Folds and scans are part and parcel of a functional programmer, and are common in functional programming languages, as well as <strong><em>array programming languages</em></strong>. Typically, they are referred to as reduction and accumulation, e.g., in the array programming languages NumPy, Julia, and R, folds and scans are called <code>reduce</code> and <code>accumulate</code>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/36027403/193055974-8d8008a2-a1e6-4bd4-8ecc-7624fa611f25.png" class="imghover img-fluid figure-img"></p>
<figcaption>Image credit: <a href="https://codereport.github.io/">code_report</a></figcaption>
</figure>
</div>
<p>If you would like to know more about <strong><em>array languages</em></strong>, and how they compare to functional languages like Haskell, I highly recommend the youtube channel <a href="https://www.youtube.com/c/codereport">code_report</a>.</p>
</div></div></section>
<section id="collision-model-currying-and-laziness" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="collision-model-currying-and-laziness">Collision model: currying and laziness</h2>
<p>Let’s consider a less simple example to reveal more of Haskell’s features:</p>
<blockquote class="blockquote">
<p>A superconducting qubit <img src="https://latex.codecogs.com/png.latex?%5Crho"> (<code>rho</code>) is sensitive to heat, and is continuously undergoing a thermalization process. We can model this thermalization process with a collision model, where the qubit evolves via repeated “collision” with different qubits at each discrete time step for <img src="https://latex.codecogs.com/png.latex?n"> (<code>n</code>) number of time steps. The collision is implemented by the function <code>collision</code>. We want to determine how the von Neumann entropy of <img src="https://latex.codecogs.com/png.latex?%5Crho">, <img src="https://latex.codecogs.com/png.latex?S(%5Crho)">, changes in each collision up till <img src="https://latex.codecogs.com/png.latex?n"> time steps. The calculation of the von Neumann entropy is implemented by the function <code>entropy</code>.</p>
</blockquote>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">For completeness, the function <code>collision</code> performs the operation of <img src="https://latex.codecogs.com/png.latex?%0A%5Crho_%7Bt+1%7D%0A=%20%5Csum_i%20K_i%20%5Crho_t%20K_i%5E%5Cdagger,%0A"> where <img src="https://latex.codecogs.com/png.latex?K_i"> are Kraus operators, and the function <code>entropy</code> computes <img src="https://latex.codecogs.com/png.latex?%0AS%5Cleft(%5Crho_t%5Cright)%20=%20-%5Cmathrm%7BTr%7D%20%5Cleft(%5Crho_t%20%5Clog%20%5Crho_t%5Cright).%0A"> Therefore, what we want is simply the list of <img src="https://latex.codecogs.com/png.latex?%5Csmall%5BS(%5Crho_0),%20S(%5Crho_1),%20%5Cldots,%20S(%5Crho_%7Bn-1%7D)%5D"></span></div></div>
<p>This might look complicated if one does not know quantum mechanics. However, if we assume that the collision and entropy calculations are done for us in the functions <code>collision</code> and <code>entropy</code>, then we simply want a list of <code>n</code> entropy values, i.e., <code>entropy_list = [entropy(rho), entropy(collision(rho)), entropy(collision(collision(rho))),...]</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sp</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> collision(ks, rho):</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> k.conj().T <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ks])</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> entropy(rho):</span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.trace(rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> sp.linalg.logm(rho))</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_entropies(ks, rho, n):</span>
<span id="cb7-10">    entropy_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb7-12">        rho_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> entropy(rho)</span>
<span id="cb7-13">        entropy_list.append(rho_entropy)</span>
<span id="cb7-14">        rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collision(ks, rho)</span>
<span id="cb7-15"></span>
<span id="cb7-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> entropy_list</span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">collision ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span></span>
<span id="cb8-2">collision ks rho <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> [k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> tr k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ks]</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">entropy ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span></span>
<span id="cb8-5">entropy rho <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> trace (rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> logm rho)</span>
<span id="cb8-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb8-7">    logm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> matFunc <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">calc_entropies ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span>]</span>
<span id="cb8-10">calc_entropies ks rho n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> entropy rho_list</span>
<span id="cb8-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb8-12">    rho_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">iterate</span> (collision ks) rho)</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Extra things to note for the Haskell example
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p>Similar to Python, Haskell has list comprehension, which has a mathematical syntax as seen in the function <code>collision</code>, e.g.,</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb9-1">example <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ps, q <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> qs, p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<p>would give a list of the set <img src="https://latex.codecogs.com/png.latex?%5C%7Bpq%5C%20%7C%5C%20p%20%5Cin%20P,%5C%20q%20%5Cin%20Q,%5C%20p%20%5Cgeq%205,%5C%20q%20%5Cneq%200%20%5C%7D."></p>
<p>On the other hand, Python’s list comprehension is less concise:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">example <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ps <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> qs <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div></li>
<li><p>In the <code>entropy</code> and <code>calc_entropies</code> functions, we have used the <code>where</code> keyword, which allows us to break a function into smaller constituents, e.g.,</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb11-1">exampleFunc a b c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> d</span>
<span id="cb11-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb11-3">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb11-4">    d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span>
<span id="cb11-5">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb11-6">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c</span></code></pre></div>
<p>Alternatively, we can also use the <code>let</code> and <code>in</code> keyword:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb12-1">exampleFunc a b c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb12-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span></span>
<span id="cb12-3">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb12-4">    d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span>
<span id="cb12-5">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb12-6">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c</span>
<span id="cb12-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb12-8">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> d</span></code></pre></div></li>
</ul>
</div>
</div>
</div>
<p>The Python example, being imperative, should be self-explanatory. Instead, we are interested in the Haskell example, specifically the <code>calc_entropies</code> function, which might look arcane if one does not know common functional programming functions such as <code>map</code>, <code>take</code>, and <code>iterate</code>. Let’s look at this line-by-line.</p>
<section id="currying" class="level3">
<h3 class="anchored" data-anchor-id="currying">Currying</h3>
<p>The very first line of the <code>calc_entropies</code> function is the type signature of:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathtt%7Bcalc%5C_entropies%20::%20%5BMatrix%5C%20C%5D%5C%20-%3E%20Matrix%5C%20C%5C%20-%3E%20Int%5C%20-%3E%20%5BFloat%5D%7D%0A"></p>
<p>which states that the function <code>calc_entropies</code> takes in a list of complex matrix, a complex matrix, and an integer, and returns a list of floats. The list of complex matrix refers to the Kraus operators <img src="https://latex.codecogs.com/png.latex?K_i"> used in the <code>collision</code> function, the complex matrix refers to <code>rho</code> or <img src="https://latex.codecogs.com/png.latex?%5Crho">, the integer refers to <code>n</code>, while the list of floats refers to the output <code>entropy_list</code>.</p>
<p>One might notice that <code>[Matrix C] -&gt; Matrix C -&gt; Int -&gt; [Float]</code> doesn’t seem to make a clear distinction between inputs and outputs. This has to do with the concept of <strong><em>partial function application</em></strong>, or <a href="https://en.wikipedia.org/wiki/Currying"><strong><em>currying</em></strong></a> (also named after Haskell Curry).</p>
<p>Implicitly, what’s happening is the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathtt%7Bcalc%5C_entropies%20::%20%5BMatrix%5C%20C%5D%5C%20-%3E%5C%20%7D%20%5Cunderbrace%7B%5Cmathtt%7BMatrix%5C%20C%5C%20-%3E%20Int%5C%20-%3E%20%5BFloat%5D%7D%7D_%5Ctext%7Bfunction%20$f$%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%0Af%5C%20%5Cmathtt%7B::%20Matrix%5C%20C%5C%20-%3E%5C%20%7D%20%5Cunderbrace%7B%5Cmathtt%7BInt%5C%20-%3E%20%5BFloat%5D%7D%7D_%5Ctext%7Bfunction%20$g$%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ag%5C%20%5Cmathtt%7B::%20Int%5C%20-%3E%20%5BFloat%5D%7D%0A"></p>
<p>where the function <code>calc_entropies</code> takes in <code>[Matrix C]</code> as its input, and returns a function <img src="https://latex.codecogs.com/png.latex?f"> as its output. The function <img src="https://latex.codecogs.com/png.latex?f"> then takes in <code>Matrix C</code> as the input and returns another function <img src="https://latex.codecogs.com/png.latex?g"> as the output. Finally, the function <img src="https://latex.codecogs.com/png.latex?g"> takes in <code>Int</code> as the input and returns <code>[Float]</code> as the final output. This means that functions in Haskell are indeed pure in that they only take in one input and one output, and any functions that appear to take in multiple inputs are in fact taking in only one input and returning a function that takes in also one input, and so on and so forth. This is called currying. Because of this, we can also apply the functions “partially”, for example:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb13-1">f a b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb13-2">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> f <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
<p>where we only provide one argument to <code>f</code> when it is expecting two, to create a new function <code>g</code>. This means that <code>f 5 10</code> and <code>g 10</code> would give the same output of <code>15</code>. Currying or partial function application can be a powerful tool for the abstraction and expressiveness of your code.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example of the usefulness of currying
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Unitary operations are common in quantum mechanics, and are how quantum computers perform computations on quantum states or qubits. They are defined as follows: <img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cpsi'%5Crangle%20=%20U%20%7C%5Cpsi%5Crangle.%0A"></p>
<p>We can define a function <code>unitary_oper</code> to implement this.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-5-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-1" aria-controls="tabset-5-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-5-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-2" aria-controls="tabset-5-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-5-1" class="tab-pane active" aria-labelledby="tabset-5-1-tab">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> unitary_oper(U, ket):</span>
<span id="cb14-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ket</span></code></pre></div>
</div>
<div id="tabset-5-2" class="tab-pane" aria-labelledby="tabset-5-2-tab">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb15-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">unitary_oper ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span></span>
<span id="cb15-2">unitary_oper u ket <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> ket</span></code></pre></div>
</div>
</div>
</div>
<p>There are many common unitaries <img src="https://latex.codecogs.com/png.latex?U"> used in quantum computations, referred to as <a href="https://en.wikipedia.org/wiki/Quantum_logic_gate">quantum logic gates</a>. For example there are the Pauli X gate and the Hadamard gate which are defined as <img src="https://latex.codecogs.com/png.latex?%0AX%20=%0A%5Cbegin%7Bpmatrix%7D%0A0%20&amp;%201%20%5C%5C%0A1%20&amp;%200%0A%5Cend%7Bpmatrix%7D,%5Cquad%0AH%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%7D%7D%0A%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20%5C%5C%0A1%20&amp;%20-1%0A%5Cend%7Bpmatrix%7D.%0A"></p>
<p>Currying or partial-function application allows us to easily define these new gate operations on top of the existing <code>unitary_oper</code> function:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb16-1">pauli_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unitary_oper (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb16-2">hadamard <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unitary_oper (cmap (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<p>We can then easily apply the Pauli X and Hadamard gates on a qubit <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle%20=%20%5B1,%200%5D%5ET"> with <code>pauli_x (2&gt;&lt;1) [1, 0]</code> and <code>hadamard (2&gt;&lt;1) [1, 0]</code>. This can make the code more concise and clearer.</p>
</div>
</div>
</div>
</section>
<section id="lazy-evaluation" class="level3">
<h3 class="anchored" data-anchor-id="lazy-evaluation">Lazy evaluation</h3>
<p>Moving on to the function itself:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb17-1">calc_entropies ks rho n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> entropy rho_list</span>
<span id="cb17-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb17-3">    rho_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">iterate</span> (collision ks) rho)</span></code></pre></div>
<p>The first line features the function <code>map</code>, which is another part and parcel of the functional programmer. It simply apply a function to every element of a list:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderbrace%7B%5Cmathtt%7Bmap%5Cquad%20entropy%7D%7D_%5Ctext%7Bapply%20entropy%20function%20to%20each%20element%20of%7D%5Cquad%20%5Cmathtt%7Brho%5C_list%7D%0A"></p>
<p>and has the corresponding Python code of</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">entropy_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [entropy(rho) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rho <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rho_list]</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or alternatively</span></span>
<span id="cb18-4">entropy_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rho <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rho_list:</span>
<span id="cb18-6">    entropy_list.append(entropy(rho))</span></code></pre></div>
<p>Finally, in the last line we have</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathtt%7Bwhere%5Cquad%20rho%5C_list%7D%20="> <img src="https://latex.codecogs.com/png.latex?%0A%5Cunderbrace%7B%5Cmathtt%7Btake%5Cquad%20n%7D%7D_%5Ctext%7Btake%20first%20$n$%20of%7D%5Cquad%20%5Cunderbrace%7B%5Cmathtt%7B(iterate%5Cquad%20(collision%5Cquad%20ks)%5Cquad%20rho)%7D%7D_%5Ctext%7Breturns%20an%20infinite-sized%20list%20of%20%5Brho,%20collision(rho),%20collision(collision(rho)),...%5D%7D%0A"> which gives <code>rho_list = [rho, collision(rho), collision(collison(rho)),...]</code> up till <code>n</code> number of elements in the list.</p>
<p>Also note that we can reduce the number of parenthesis by using <code>$</code> instead, e.g., <code>rho_list = take n $ iterate (collision ks) rho</code>.</p>
<p>It might be quite surprising that the <code>iterate</code> function returns an infinite-sized list. For example, <code>iterate add1 10</code> gives <code>[11, 12, 13, 14, 15, ...]</code> to infinity, where the function <code>add1</code> is applied on <code>10</code> ad infinitum. If we were to write the corresponding Python code for <code>rho_list = take n (iterate (collision ks) rho)</code>, it might look something like</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">rhos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb19-3">    rhos.append(rho)</span>
<span id="cb19-4">    rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collision(ks, rho)</span>
<span id="cb19-5"></span>
<span id="cb19-6">rho_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rhos[:n]</span></code></pre></div>
<p>which runs forever and result in a list of infinite size. However, this is not a problem in Haskell, thanks to the fact that Haskell is <a href="https://en.wikipedia.org/wiki/Lazy_evaluation"><strong><em>lazy-evaluated</em></strong></a>. This means that Haskell only evaluate values when required, and so since we only require the first <code>n</code> elements of the infinite list, Haskell only evaluate that first <code>n</code> elements.</p>
<p>If this Python code is lazy-evaluated like in Haskell, one might imagine that the program looks ahead and saw that it only require the first <code>n</code> elements as stated in <code>rho_list = rhos[:n]</code>, and so it stops the <code>while True</code> loop after only running <code>n</code> times.</p>


</section>
</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>software</category>
  <category>programming</category>
  <guid>https://jianweicheong.codeberg.page/posts/haskell-numerical.html</guid>
  <pubDate>Mon, 04 Sep 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Why I recommend Fedora for new Linux users</title>
  <link>https://jianweicheong.codeberg.page/posts/why-fedora.html</link>
  <description><![CDATA[ 




<p>Here, I provide a list of reasons on why I think Fedora is a good starting point for new Linux users, which comes down to a single advantage: good defaults.</p>
<section id="semi-rolling-release" class="level1">
<h1>Semi-rolling release</h1>
<p>When you use your computer, here’s what you might expect:</p>
<ol type="1">
<li>You want all your programs to be updated to the latest versions.</li>
<li>You want the stuffs running in the background to be updated to the latest versions.</li>
<li>You don’t want major changes to your user experience or to how things are done.</li>
</ol>
<p>This is reasonable; you want frequent updates because you want the latest features, or security and bug fixes. But at the same time, you don’t want your desktop to completely change after an update (think Windows 7 to 8, or 10 to 11).</p>
<p>Fedora’s semi-rolling release cycle abide by these: you get frequent updates (including kernel updates), but some packages like the desktop environment GNOME, or major software decisions (like moving to a new technology), are only updated in a major version release that the user must initiate.</p>
</section>
<section id="wayland" class="level1">
<h1>Wayland</h1>
<p>Most Linux distros use <code>X11</code> as its windowing system (a program that handles how windows are drawn on your screen). However, <code>X11</code> does not have GUI isolation, allowing different programs to interact with one another. A malicious program can then record your screen, or log the keys you typed in your browser while you are logging in to your bank.</p>
<p><code>Wayland</code> is the successor to <code>X11</code>, and is developed with security in mind, isolating each window from one another.</p>
<blockquote class="blockquote">
<p>Unlike X, the Wayland input stack doesn’t allow applications to snoop on the input of other programs (preserving confidentiality), to generate input events that appear to come from the user (preserving input integrity), or to capture all the input events to the exclusion of the user’s application (preserving availability).</p>
<p>— <a href="https://lwn.net/Articles/589147/">Jake Edge, LWN.net</a></p>
</blockquote>
</section>
<section id="swap-on-zram" class="level1">
<h1>Swap on ZRAM</h1>
<p>Linux systems offers a “swap” space, where memory on the RAM can be copied to disk space, freeing the RAM in the process. Swap is an <a href="https://chrisdown.name/2018/01/02/in-defence-of-swap.html">important part</a> of a Linux operating system. However, sensitive information stored on RAM can be copied to disk, risking potential security issues. <code>ZRAM</code> solves these problems by having the swap space remain in the RAM with compression, ensuring that no sensitive information will be stored on disk.</p>
</section>
<section id="btrfs" class="level1">
<h1>Btrfs</h1>
<p>Most Linux distros have traditionally used the <code>ext4</code> filesystem. <code>btrfs</code> is a newer file system that offers advantages over <code>ext4</code>:</p>
<ul>
<li>Compression leads to less disk space used.</li>
<li>Compression also extends the lifespan of flash-based devices (SSDs, etc.).</li>
<li>Less likely to have data corruption.</li>
<li>Provides snapshots that allows rollback when system breaks.</li>
</ul>
<blockquote class="blockquote">
<p>For laptop and workstation installs of Fedora, we want to provide file system features to users in a transparent fashion. We want to add new features, while reducing the amount of expertise needed to deal with situations like running out of disk space. Btrfs is well adapted to this role by design philosophy, let’s make it the default.</p>
<p>…</p>
<p>The Btrfs community has users that have been using it for most of the past decade at scale. It’s been the default on openSUSE (and SUSE Linux Enterprise) since 2014, and Facebook has been using it for all their OS and data volumes, in their data centers, for almost as long. Btrfs is a mature, well-understood, and battle-tested file system, used on both desktop/container and server/cloud use-cases.</p>
<p>— <a href="https://fedoraproject.org/wiki/Changes/BtrfsByDefault">Fedora Project wiki, Btrfs changes proposal</a></p>
</blockquote>
</section>
<section id="selinux-and-firewalld" class="level1">
<h1>SELinux and firewalld</h1>
<p>Security Enhanced Linux (<code>SELinux</code>) provides Mandatory Access Control (MAC).</p>
<blockquote class="blockquote">
<p>In computer security, mandatory access control (MAC) refers to a type of access control by which the operating system or database constrains the ability of a subject or initiator to access or generally perform some sort of operation on an object or target.</p>
<p>— <a href="https://en.wikipedia.org/wiki/Mandatory_access_control">Wikipedia</a></p>
</blockquote>
<blockquote class="blockquote">
<p>Security Enhanced Linux (SELinux) provides an additional layer of system security. SELinux fundamentally answers the question: May &lt;subject&gt; do &lt;action&gt; to &lt;object&gt;?, for example: May a web server access files in users’ home directories?</p>
<p>— <a href="https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-selinux/">Fedora docs</a></p>
</blockquote>
<p>Fedora comes with good default policies for <code>SELinux</code>, as well as good default firewall rules with <code>firewalld</code>.</p>
</section>
<section id="flatpak-enabled" class="level1">
<h1>Flatpak enabled</h1>
<p><code>Flatpak</code> is supposed to be a new and universal way of installing programs. <code>Flatpak</code> is now available on almost all major distros and is also the most popular way of installing programs on the Steam Deck.</p>
<p>Ubuntu on the other hand, while often recommended to beginners, decided to <a href="https://discourse.ubuntu.com/t/ubuntu-flavor-packaging-defaults/34061?u=d0od">drop Flatpak</a> in favor of <code>snap</code>, which is their own alternative that is much less popular. <code>snap</code> packages <a href="https://askubuntu.com/questions/1185091/why-apt-package-chromium-browser-installs-snap-package-instead">masquerade as traditional packages</a>, which can cause confusion for new users. They also <a href="https://forum.snapcraft.io/t/sudo-snap-install-or-just-snap-install/3909">encourage users to sign up an Ubuntu One account</a> just to install <code>snap</code> packages without root.</p>
</section>
<section id="speed-of-adopting-new-technologies" class="level1">
<h1>Speed of adopting new technologies</h1>
<p>Fedora tends to adopt new technologies at a fast pace, such as <code>Wayland</code>, swap on <code>ZRAM</code>, <code>Flatpak</code>, <code>PipeWire</code>, <code>btrfs</code> etc. New technologies tends to offer improvements in terms of usability and security.</p>
<p>For example, Fedora adopted <code>Wayland</code> in 2016, but Ubuntu only done so in 2021. Even Red Hat Enterprise Linux (RHEL) and Debian adopted <code>Wayland</code> in 2019, earlier than Ubuntu, despite both being extremely conservative distros.</p>
</section>
<section id="whats-next" class="level1">
<h1>What’s next?</h1>
<p>If you just want a usable system with no interest in learning more about the Linux ecosystem, then I believe Fedora is the ideal choice. However, I do not encourage people to stay on Fedora for the rest of their Linux journey. Rather, one should try out different Linux distros and explore alternatives to learn more about the Linux ecosystem.</p>
<p>Eventually, as you gain more understanding of the Linux ecosystem, you will develop your own opinions on things. For example, you might be <a href="https://flatkill.org/2020/">against Flatpak</a>, or perhaps you might think that <a href="https://nosystemd.org/">systemd has major problems</a>. Regardless, the greatest strength of the Linux ecosystem is the power to make your own choices on what software and technologies you prefer.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>software</category>
  <category>linux</category>
  <guid>https://jianweicheong.codeberg.page/posts/why-fedora.html</guid>
  <pubDate>Fri, 31 Mar 2023 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
