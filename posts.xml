<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Jian Wei Cheong</title>
<link>https://jianweicheong.codeberg.page/posts.html</link>
<atom:link href="https://jianweicheong.codeberg.page/posts.xml" rel="self" type="application/rss+xml"/>
<description>Personal page of Jian Wei Cheong</description>
<generator>quarto-1.7.6</generator>
<lastBuildDate>Mon, 04 Sep 2023 16:00:00 GMT</lastBuildDate>
<item>
  <title>Haskell for numerical computation?</title>
  <link>https://jianweicheong.codeberg.page/posts/haskell-numerical.html</link>
  <description><![CDATA[ 




<section id="why-haskell" class="level1 page-columns page-full">
<h1>Why Haskell?</h1>
<p>Recently, I have been experimenting with <a href="https://en.wikipedia.org/wiki/Haskell">Haskell</a> which I find to be quite enjoyable to program in, thanks to its unique programming paradigm. So much so that I am considering using it for numerical computations in my research.</p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside"><strong>Side-effects</strong> refers to having an effect on the “outside world” such as printing a string to terminal or writing to a file etc. Of course, we do want some side-effects for the program to do anything useful. In Haskell, side-effects are handled by <a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)">monads</a>, which is a beast of a topic on its own. Monads allow the pure and impure (side-effects) to be clearly separated in Haskell.</span></div></div>
<p>Haskell (named after logician <a href="https://en.wikipedia.org/wiki/Haskell_Curry">Haskell Curry</a>) is a purely functional programming language in the mathematical sense. Every function in Haskell simply takes an input and returns an output—nothing more, nothing less. It cannot mutate variables, and it cannot produce <strong><em>side-effects</em></strong>.</p>
<p>Purely functional programming languages are typically declarative, i.e., one does not write step-by-step instructions like imperative languages such as Python, C, C++, etc. For example, there are no loops in Haskell; one has to rely on recursion or functions such as ‘fold’ and ‘scan’.</p>
<p>The two main reasons for my consideration to use it for numerical computations are:</p>
<ol type="1">
<li><p>Conciseness: Haskell’s declarative style greatly increase its conciseness. Prototyping and experimentation are frequent in computational research. Concise codes can reduce this programming time, and allow faster prototyping.</p></li>
<li><p>Safety and correctness: A small bug in numerical computational would not raise any error. Instead, it manifests in computed results or plots, masquerading as valid or even novel results. If these bugs are not identified, one might publish a paper with faux results.</p>
<ul>
<li>Haskell’s static typing can serve as an additional check to reduce bugs.</li>
<li>Its declarative approach means that codes are written in easily verifiable expressions, like in mathematics, rather than imperative statements that are often prone to bugs or human error.</li>
<li>Immutability and the absence of side-effects in functions can also reduce hidden bugs. For instance, the risk of a function modifying a variable without the coder’s knowledge is mitigated, and parallel computations are less likely to produce incorrect results due to variable mutations in multiple threads.</li>
</ul></li>
</ol>
<p>I am neither a software developer nor am I computer science trained, and so some technical aspects of the language might escape me. Therefore, in this article, we will only examine some simple examples to compare traditional imperative languages like Python with purely functional Haskell.</p>
</section>
<section id="some-examples" class="level1 page-columns page-full">
<h1>Some examples</h1>
<section id="sum-recursion" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="sum-recursion">Sum: recursion</h2>
<p>Ignoring the fact that the function <code>sum</code> is built-in in both Python and Haskell, let’s see how one might write a <code>sum</code> function that sum all the elements in a list.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(xs):</span>
<span id="cb1-2">    sum_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> xs:</span>
<span id="cb1-4">        sum_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> x</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sum_all</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> xs</span></code></pre></div>
</div>
</div>
</div>
<p>In the imperative Python example, we tell the program what to do step-by-step: first initialize an accumulator <code>sum_all</code> to 0, then loop through each elements in the list and add them to the accumulator.</p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">One might notice that functions are applied without parenthesis, i.e., applying a function <code>foo</code> on a variable <code>x</code>, is typically <code>foo(x)</code>, but would be <code>foo x</code> in Haskell. The reason for this has something to do with the concept of “currying” which we will see later.</span></div></div>
<p>On the other hand, in the declarative Haskell example, we state that the sum of a list is simply the first element <code>x</code> plus the sum of the rest of the elements <code>xs</code>. This will then carry on recursively. As with all recursive functions, we require a base case to end the recursion, which is specified by <code>sum [] = 0</code>, which states to return 0 if the input to <code>sum</code> is an empty list. This ability to define the <code>sum</code> function twice with <code>sum [] = 0</code> and <code>sum (x:xs) = x + sum xs</code>, is simply <a href="https://en.wikipedia.org/wiki/Pattern_matching">pattern matching</a>.</p>
<p>Finally, Haskell is statically typed, i.e., the types of the inputs and outputs of the function can be specified which in our case is <code>sum :: [Float] -&gt; Float</code>, which states that the function <code>sum</code> takes in a list of floats <code>[Float]</code> and returns a single float <code>Float</code>. This type declaration looks similar to how one might write <img src="https://latex.codecogs.com/png.latex?f:%20X%20%5Cto%20Y"> mathematically for a function <img src="https://latex.codecogs.com/png.latex?y%20=%20f(x)">, where <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20X">, and <img src="https://latex.codecogs.com/png.latex?y%5Cin%20Y">.</p>
</section>
<section id="tensor-product-reduction-and-accumulation" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="tensor-product-reduction-and-accumulation">Tensor product: reduction and accumulation</h2>
<p>Here is a common example in quantum information/computation, where we have some quantum states that are complex matrices, and we want to perform a tensor product on them so that we can operate on them collectively.</p>
<blockquote class="blockquote">
<p>Given a list of matrices, the function <code>tensor_all</code> returns the tensor product of all the elements of the list in sequence, e.g., given the list of matrices <img src="https://latex.codecogs.com/png.latex?Ms%20=%20%5BA,%20B,%20C%5D">, <code>tensor_all(Ms)</code> should return their tensor product <img src="https://latex.codecogs.com/png.latex?A%5Cotimes%20B%5Cotimes%20C">.</p>
</blockquote>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tensor_all(Ms):</span>
<span id="cb3-4">    tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> M <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Ms:</span>
<span id="cb3-6">        tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.kron(tensor_prod, M)</span>
<span id="cb3-7"></span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tensor_prod</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Numeric.LinearAlgebra</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">tensor_all ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span></span>
<span id="cb4-4">tensor_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foldl</span> kronecker <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
</div>
</div>
<p>Imperatively in the Python example, we loop through each element of the list and apply the tensor product (kronecker product <code>np.kron</code>) element-by-element with an accumulator, i.e., in the first loop we have <img src="https://latex.codecogs.com/png.latex?(1)%20%5Cotimes%20A">, in the second loop we have <img src="https://latex.codecogs.com/png.latex?(1%5Cotimes%20A)%20%5Cotimes%20B">, in the third loop we have <img src="https://latex.codecogs.com/png.latex?(1%5Cotimes%20A%20%5Cotimes%20B)%20%5Cotimes%20C">, and so on and so forth, where our accumulator <code>tensor_prod</code> is the value in the parenthesis, is initialized as <img src="https://latex.codecogs.com/png.latex?1">, and is updated every loop.</p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">Note we have used the <code>hmatrix</code> library which is imported by <code>import Numeric.LinearAlgebra</code>. <a href="https://pechersky.github.io/haskell-numpy-docs/">This documentation</a> is a good resource for a comparison between <code>hmatrix</code> and Python’s <code>numpy</code>.</span></div></div>
<p>In Haskell, it should be obvious that we can perform a recursion like the case for <code>sum</code>. However, here we introduced the function <code>foldl</code>, which stands for “fold left”. <code>foldl</code> takes in a binary function (in this case <code>kronecker</code>), the initial accumulator (in this case <code>1</code>), and a list (e.g., <code>[a, b, c]</code>). It then returns <code>kronecker(kronecker(kronecker(1, a), b), c)</code>. There is also <code>foldr</code>, or “fold right”, which instead returns <code>kronecker(a, kronecker(b, kronecker(c, 1)))</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Point-free style programming
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Note that in the Haskell example, we could have written the function as <code>tensor_all ms = foldl kronecker 1 ms</code>, where the input to the function, the list of matrices <code>ms</code>, is specified. However, since <code>ms</code> is simply the input to the corresponding functions on both sides of the expression, we can omit it and simply write <code>tensor_all = foldl kronecker 1</code>. This is referred to as <a href="https://en.wikipedia.org/wiki/Tacit_programming">point-free style programming</a>.</p>
</div>
</div>
</div>
<p>If instead, we want to “accumulate” the result of each loop into a list, i.e., we want the function to return <img src="https://latex.codecogs.com/png.latex?%5BA,%20A%20%5Cotimes%20B,%20A%5Cotimes%20B%5Cotimes%20C%5D">, then, in the Python example we have to append the accumulator <code>tensor_prod</code> in each loop into a list. On the other hand, in the Haskell example, we can simply replace <code>foldl</code> with <code>scanl</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tensor_all(Ms):</span>
<span id="cb5-4">    tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-5">    tensor_prod_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> M <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Ms:</span>
<span id="cb5-7">        tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.kron(tensor_prod, M)</span>
<span id="cb5-8">        tensor_prod_list.append(tensor_prod)</span>
<span id="cb5-9"></span>
<span id="cb5-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tensor_prod_list</span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Numeric.LinearAlgebra</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">tensor_all ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>]</span>
<span id="cb6-4">tensor_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scanl</span> kronecker <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
</div>
</div>
<p>Folds and scans are part and parcel of a functional programmer, and are common in functional programming languages, as well as <strong><em>array programming languages</em></strong>. Typically, they are referred to as reduction and accumulation, e.g., in the array programming languages NumPy, Julia, and R, folds and scans are called <code>reduce</code> and <code>accumulate</code>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/36027403/193055974-8d8008a2-a1e6-4bd4-8ecc-7624fa611f25.png" class="imghover img-fluid figure-img"></p>
<figcaption>Image credit: <a href="https://codereport.github.io/">code_report</a></figcaption>
</figure>
</div>
<p>If you would like to know more about <strong><em>array languages</em></strong>, and how they compare to functional languages like Haskell, I highly recommend the youtube channel <a href="https://www.youtube.com/c/codereport">code_report</a>.</p>
</div></div></section>
<section id="collision-model-currying-and-laziness" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="collision-model-currying-and-laziness">Collision model: currying and laziness</h2>
<p>Let’s consider a less simple example to reveal more of Haskell’s features:</p>
<blockquote class="blockquote">
<p>A superconducting qubit <img src="https://latex.codecogs.com/png.latex?%5Crho"> (<code>rho</code>) is sensitive to heat, and is continuously undergoing a thermalization process. We can model this thermalization process with a collision model, where the qubit evolves via repeated “collision” with different qubits at each discrete time step for <img src="https://latex.codecogs.com/png.latex?n"> (<code>n</code>) number of time steps. The collision is implemented by the function <code>collision</code>. We want to determine how the von Neumann entropy of <img src="https://latex.codecogs.com/png.latex?%5Crho">, <img src="https://latex.codecogs.com/png.latex?S(%5Crho)">, changes in each collision up till <img src="https://latex.codecogs.com/png.latex?n"> time steps. The calculation of the von Neumann entropy is implemented by the function <code>entropy</code>.</p>
</blockquote>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">For completeness, the function <code>collision</code> performs the operation of <img src="https://latex.codecogs.com/png.latex?%0A%5Crho_%7Bt+1%7D%0A=%20%5Csum_i%20K_i%20%5Crho_t%20K_i%5E%5Cdagger,%0A"> where <img src="https://latex.codecogs.com/png.latex?K_i"> are Kraus operators, and the function <code>entropy</code> computes <img src="https://latex.codecogs.com/png.latex?%0AS%5Cleft(%5Crho_t%5Cright)%20=%20-%5Cmathrm%7BTr%7D%20%5Cleft(%5Crho_t%20%5Clog%20%5Crho_t%5Cright).%0A"> Therefore, what we want is simply the list of <img src="https://latex.codecogs.com/png.latex?%5Csmall%5BS(%5Crho_0),%20S(%5Crho_1),%20%5Cldots,%20S(%5Crho_%7Bn-1%7D)%5D"></span></div></div>
<p>This might look complicated if one does not know quantum mechanics. However, if we assume that the collision and entropy calculations are done for us in the functions <code>collision</code> and <code>entropy</code>, then we simply want a list of <code>n</code> entropy values, i.e., <code>entropy_list = [entropy(rho), entropy(collision(rho)), entropy(collision(collision(rho))),...]</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sp</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> collision(ks, rho):</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> k.conj().T <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ks])</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> entropy(rho):</span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.trace(rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> sp.linalg.logm(rho))</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_entropies(ks, rho, n):</span>
<span id="cb7-10">    entropy_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb7-12">        rho_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> entropy(rho)</span>
<span id="cb7-13">        entropy_list.append(rho_entropy)</span>
<span id="cb7-14">        rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collision(ks, rho)</span>
<span id="cb7-15"></span>
<span id="cb7-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> entropy_list</span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">collision ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span></span>
<span id="cb8-2">collision ks rho <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> [k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> tr k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ks]</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">entropy ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span></span>
<span id="cb8-5">entropy rho <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> trace (rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> logm rho)</span>
<span id="cb8-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb8-7">    logm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> matFunc <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">calc_entropies ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span>]</span>
<span id="cb8-10">calc_entropies ks rho n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> entropy rho_list</span>
<span id="cb8-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb8-12">    rho_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">iterate</span> (collision ks) rho)</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Extra things to note for the Haskell example
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p>Similar to Python, Haskell has list comprehension, which has a mathematical syntax as seen in the function <code>collision</code>, e.g.,</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb9-1">example <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ps, q <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> qs, p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<p>would give a list of the set <img src="https://latex.codecogs.com/png.latex?%5C%7Bpq%5C%20%7C%5C%20p%20%5Cin%20P,%5C%20q%20%5Cin%20Q,%5C%20p%20%5Cgeq%205,%5C%20q%20%5Cneq%200%20%5C%7D."></p>
<p>On the other hand, Python’s list comprehension is less concise:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">example <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ps <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> qs <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div></li>
<li><p>In the <code>entropy</code> and <code>calc_entropies</code> functions, we have used the <code>where</code> keyword, which allows us to break a function into smaller constituents, e.g.,</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb11-1">exampleFunc a b c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> d</span>
<span id="cb11-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb11-3">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb11-4">    d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span>
<span id="cb11-5">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb11-6">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c</span></code></pre></div>
<p>Alternatively, we can also use the <code>let</code> and <code>in</code> keyword:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb12-1">exampleFunc a b c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb12-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span></span>
<span id="cb12-3">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb12-4">    d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span>
<span id="cb12-5">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb12-6">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c</span>
<span id="cb12-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb12-8">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> d</span></code></pre></div></li>
</ul>
</div>
</div>
</div>
<p>The Python example, being imperative, should be self-explanatory. Instead, we are interested in the Haskell example, specifically the <code>calc_entropies</code> function, which might look arcane if one does not know common functional programming functions such as <code>map</code>, <code>take</code>, and <code>iterate</code>. Let’s look at this line-by-line.</p>
<section id="currying" class="level3">
<h3 class="anchored" data-anchor-id="currying">Currying</h3>
<p>The very first line of the <code>calc_entropies</code> function is the type signature of:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathtt%7Bcalc%5C_entropies%20::%20%5BMatrix%5C%20C%5D%5C%20-%3E%20Matrix%5C%20C%5C%20-%3E%20Int%5C%20-%3E%20%5BFloat%5D%7D%0A"></p>
<p>which states that the function <code>calc_entropies</code> takes in a list of complex matrix, a complex matrix, and an integer, and returns a list of floats. The list of complex matrix refers to the Kraus operators <img src="https://latex.codecogs.com/png.latex?K_i"> used in the <code>collision</code> function, the complex matrix refers to <code>rho</code> or <img src="https://latex.codecogs.com/png.latex?%5Crho">, the integer refers to <code>n</code>, while the list of floats refers to the output <code>entropy_list</code>.</p>
<p>One might notice that <code>[Matrix C] -&gt; Matrix C -&gt; Int -&gt; [Float]</code> doesn’t seem to make a clear distinction between inputs and outputs. This has to do with the concept of <strong><em>partial function application</em></strong>, or <a href="https://en.wikipedia.org/wiki/Currying"><strong><em>currying</em></strong></a> (also named after Haskell Curry).</p>
<p>Implicitly, what’s happening is the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathtt%7Bcalc%5C_entropies%20::%20%5BMatrix%5C%20C%5D%5C%20-%3E%5C%20%7D%20%5Cunderbrace%7B%5Cmathtt%7BMatrix%5C%20C%5C%20-%3E%20Int%5C%20-%3E%20%5BFloat%5D%7D%7D_%5Ctext%7Bfunction%20$f$%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%0Af%5C%20%5Cmathtt%7B::%20Matrix%5C%20C%5C%20-%3E%5C%20%7D%20%5Cunderbrace%7B%5Cmathtt%7BInt%5C%20-%3E%20%5BFloat%5D%7D%7D_%5Ctext%7Bfunction%20$g$%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ag%5C%20%5Cmathtt%7B::%20Int%5C%20-%3E%20%5BFloat%5D%7D%0A"></p>
<p>where the function <code>calc_entropies</code> takes in <code>[Matrix C]</code> as its input, and returns a function <img src="https://latex.codecogs.com/png.latex?f"> as its output. The function <img src="https://latex.codecogs.com/png.latex?f"> then takes in <code>Matrix C</code> as the input and returns another function <img src="https://latex.codecogs.com/png.latex?g"> as the output. Finally, the function <img src="https://latex.codecogs.com/png.latex?g"> takes in <code>Int</code> as the input and returns <code>[Float]</code> as the final output. This means that functions in Haskell are indeed pure in that they only take in one input and one output, and any functions that appear to take in multiple inputs are in fact taking in only one input and returning a function that takes in also one input, and so on and so forth. This is called currying. Because of this, we can also apply the functions “partially”, for example:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb13-1">f a b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb13-2">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> f <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
<p>where we only provide one argument to <code>f</code> when it is expecting two, to create a new function <code>g</code>. This means that <code>f 5 10</code> and <code>g 10</code> would give the same output of <code>15</code>. Currying or partial function application can be a powerful tool for the abstraction and expressiveness of your code.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example of the usefulness of currying
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Unitary operations are common in quantum mechanics, and are how quantum computers perform computations on quantum states or qubits. They are defined as follows: <img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cpsi'%5Crangle%20=%20U%20%7C%5Cpsi%5Crangle.%0A"></p>
<p>We can define a function <code>unitary_oper</code> to implement this.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-5-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-1" aria-controls="tabset-5-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-5-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-2" aria-controls="tabset-5-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-5-1" class="tab-pane active" aria-labelledby="tabset-5-1-tab">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> unitary_oper(U, ket):</span>
<span id="cb14-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ket</span></code></pre></div>
</div>
<div id="tabset-5-2" class="tab-pane" aria-labelledby="tabset-5-2-tab">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb15-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">unitary_oper ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span></span>
<span id="cb15-2">unitary_oper u ket <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> ket</span></code></pre></div>
</div>
</div>
</div>
<p>There are many common unitaries <img src="https://latex.codecogs.com/png.latex?U"> used in quantum computations, referred to as <a href="https://en.wikipedia.org/wiki/Quantum_logic_gate">quantum logic gates</a>. For example there are the Pauli X gate and the Hadamard gate which are defined as <img src="https://latex.codecogs.com/png.latex?%0AX%20=%0A%5Cbegin%7Bpmatrix%7D%0A0%20&amp;%201%20%5C%5C%0A1%20&amp;%200%0A%5Cend%7Bpmatrix%7D,%5Cquad%0AH%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%7D%7D%0A%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20%5C%5C%0A1%20&amp;%20-1%0A%5Cend%7Bpmatrix%7D.%0A"></p>
<p>Currying or partial-function application allows us to easily define these new gate operations on top of the existing <code>unitary_oper</code> function:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb16-1">pauli_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unitary_oper (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb16-2">hadamard <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unitary_oper (cmap (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<p>We can then easily apply the Pauli X and Hadamard gates on a qubit <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle%20=%20%5B1,%200%5D%5ET"> with <code>pauli_x (2&gt;&lt;1) [1, 0]</code> and <code>hadamard (2&gt;&lt;1) [1, 0]</code>. This can make the code more concise and clearer.</p>
</div>
</div>
</div>
</section>
<section id="lazy-evaluation" class="level3">
<h3 class="anchored" data-anchor-id="lazy-evaluation">Lazy evaluation</h3>
<p>Moving on to the function itself:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb17-1">calc_entropies ks rho n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> entropy rho_list</span>
<span id="cb17-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb17-3">    rho_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">iterate</span> (collision ks) rho)</span></code></pre></div>
<p>The first line features the function <code>map</code>, which is another part and parcel of the functional programmer. It simply apply a function to every element of a list:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderbrace%7B%5Cmathtt%7Bmap%5Cquad%20entropy%7D%7D_%5Ctext%7Bapply%20entropy%20function%20to%20each%20element%20of%7D%5Cquad%20%5Cmathtt%7Brho%5C_list%7D%0A"></p>
<p>and has the corresponding Python code of</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">entropy_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [entropy(rho) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rho <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rho_list]</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or alternatively</span></span>
<span id="cb18-4">entropy_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rho <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rho_list:</span>
<span id="cb18-6">    entropy_list.append(entropy(rho))</span></code></pre></div>
<p>Finally, in the last line we have</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathtt%7Bwhere%5Cquad%20rho%5C_list%7D%20="> <img src="https://latex.codecogs.com/png.latex?%0A%5Cunderbrace%7B%5Cmathtt%7Btake%5Cquad%20n%7D%7D_%5Ctext%7Btake%20first%20$n$%20of%7D%5Cquad%20%5Cunderbrace%7B%5Cmathtt%7B(iterate%5Cquad%20(collision%5Cquad%20ks)%5Cquad%20rho)%7D%7D_%5Ctext%7Breturns%20an%20infinite-sized%20list%20of%20%5Brho,%20collision(rho),%20collision(collision(rho)),...%5D%7D%0A"> which gives <code>rho_list = [rho, collision(rho), collision(collison(rho)),...]</code> up till <code>n</code> number of elements in the list.</p>
<p>Also note that we can reduce the number of parenthesis by using <code>$</code> instead, e.g., <code>rho_list = take n $ iterate (collision ks) rho</code>.</p>
<p>It might be quite surprising that the <code>iterate</code> function returns an infinite-sized list. For example, <code>iterate add1 10</code> gives <code>[11, 12, 13, 14, 15, ...]</code> to infinity, where the function <code>add1</code> is applied on <code>10</code> ad infinitum. If we were to write the corresponding Python code for <code>rho_list = take n (iterate (collision ks) rho)</code>, it might look something like</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">rhos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb19-3">    rhos.append(rho)</span>
<span id="cb19-4">    rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collision(ks, rho)</span>
<span id="cb19-5"></span>
<span id="cb19-6">rho_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rhos[:n]</span></code></pre></div>
<p>which runs forever and result in a list of infinite size. However, this is not a problem in Haskell, thanks to the fact that Haskell is <a href="https://en.wikipedia.org/wiki/Lazy_evaluation"><strong><em>lazy-evaluated</em></strong></a>. This means that Haskell only evaluate values when required, and so since we only require the first <code>n</code> elements of the infinite list, Haskell only evaluate that first <code>n</code> elements.</p>
<p>If this Python code is lazy-evaluated like in Haskell, one might imagine that the program looks ahead and saw that it only require the first <code>n</code> elements as stated in <code>rho_list = rhos[:n]</code>, and so it stops the <code>while True</code> loop after only running <code>n</code> times.</p>


</section>
</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>software</category>
  <category>programming</category>
  <guid>https://jianweicheong.codeberg.page/posts/haskell-numerical.html</guid>
  <pubDate>Mon, 04 Sep 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Why I recommend Fedora for new Linux users</title>
  <link>https://jianweicheong.codeberg.page/posts/why-fedora.html</link>
  <description><![CDATA[ 




<p>Here, I provide a list of reasons on why I think Fedora is a good starting point for new Linux users, which comes down to a single advantage: good defaults.</p>
<section id="semi-rolling-release" class="level1">
<h1>Semi-rolling release</h1>
<p>When you use your computer, here’s what you might expect:</p>
<ol type="1">
<li>You want all your programs to be updated to the latest versions.</li>
<li>You want the stuffs running in the background to be updated to the latest versions.</li>
<li>You don’t want major changes to your user experience or to how things are done.</li>
</ol>
<p>This is reasonable; you want frequent updates because you want the latest features, or security and bug fixes. But at the same time, you don’t want your desktop to completely change after an update (think Windows 7 to 8, or 10 to 11).</p>
<p>Fedora’s semi-rolling release cycle abide by these: you get frequent updates (including kernel updates), but some packages like the desktop environment GNOME, or major software decisions (like moving to a new technology), are only updated in a major version release that the user must initiate.</p>
</section>
<section id="wayland" class="level1">
<h1>Wayland</h1>
<p>Most Linux distros use <code>X11</code> as its windowing system (a program that handles how windows are drawn on your screen). However, <code>X11</code> does not have GUI isolation, allowing different programs to interact with one another. A malicious program can then record your screen, or log the keys you typed in your browser while you are logging in to your bank.</p>
<p><code>Wayland</code> is the successor to <code>X11</code>, and is developed with security in mind, isolating each window from one another.</p>
<blockquote class="blockquote">
<p>Unlike X, the Wayland input stack doesn’t allow applications to snoop on the input of other programs (preserving confidentiality), to generate input events that appear to come from the user (preserving input integrity), or to capture all the input events to the exclusion of the user’s application (preserving availability).</p>
<p>— <a href="https://lwn.net/Articles/589147/">Jake Edge, LWN.net</a></p>
</blockquote>
</section>
<section id="swap-on-zram" class="level1">
<h1>Swap on ZRAM</h1>
<p>Linux systems offers a “swap” space, where memory on the RAM can be copied to disk space, freeing the RAM in the process. Swap is an <a href="https://chrisdown.name/2018/01/02/in-defence-of-swap.html">important part</a> of a Linux operating system. However, sensitive information stored on RAM can be copied to disk, risking potential security issues. <code>ZRAM</code> solves these problems by having the swap space remain in the RAM with compression, ensuring that no sensitive information will be stored on disk.</p>
</section>
<section id="btrfs" class="level1">
<h1>Btrfs</h1>
<p>Most Linux distros have traditionally used the <code>ext4</code> filesystem. <code>btrfs</code> is a newer file system that offers advantages over <code>ext4</code>:</p>
<ul>
<li>Compression leads to less disk space used.</li>
<li>Compression also extends the lifespan of flash-based devices (SSDs, etc.).</li>
<li>Less likely to have data corruption.</li>
<li>Provides snapshots that allows rollback when system breaks.</li>
</ul>
<blockquote class="blockquote">
<p>For laptop and workstation installs of Fedora, we want to provide file system features to users in a transparent fashion. We want to add new features, while reducing the amount of expertise needed to deal with situations like running out of disk space. Btrfs is well adapted to this role by design philosophy, let’s make it the default.</p>
<p>…</p>
<p>The Btrfs community has users that have been using it for most of the past decade at scale. It’s been the default on openSUSE (and SUSE Linux Enterprise) since 2014, and Facebook has been using it for all their OS and data volumes, in their data centers, for almost as long. Btrfs is a mature, well-understood, and battle-tested file system, used on both desktop/container and server/cloud use-cases.</p>
<p>— <a href="https://fedoraproject.org/wiki/Changes/BtrfsByDefault">Fedora Project wiki, Btrfs changes proposal</a></p>
</blockquote>
</section>
<section id="selinux-and-firewalld" class="level1">
<h1>SELinux and firewalld</h1>
<p>Security Enhanced Linux (<code>SELinux</code>) provides Mandatory Access Control (MAC).</p>
<blockquote class="blockquote">
<p>In computer security, mandatory access control (MAC) refers to a type of access control by which the operating system or database constrains the ability of a subject or initiator to access or generally perform some sort of operation on an object or target.</p>
<p>— <a href="https://en.wikipedia.org/wiki/Mandatory_access_control">Wikipedia</a></p>
</blockquote>
<blockquote class="blockquote">
<p>Security Enhanced Linux (SELinux) provides an additional layer of system security. SELinux fundamentally answers the question: May &lt;subject&gt; do &lt;action&gt; to &lt;object&gt;?, for example: May a web server access files in users’ home directories?</p>
<p>— <a href="https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-selinux/">Fedora docs</a></p>
</blockquote>
<p>Fedora comes with good default policies for <code>SELinux</code>, as well as good default firewall rules with <code>firewalld</code>.</p>
</section>
<section id="flatpak-enabled" class="level1">
<h1>Flatpak enabled</h1>
<p><code>Flatpak</code> is supposed to be a new and universal way of installing programs. <code>Flatpak</code> is now available on almost all major distros and is also the most popular way of installing programs on the Steam Deck.</p>
<p>Ubuntu on the other hand, while often recommended to beginners, decided to <a href="https://discourse.ubuntu.com/t/ubuntu-flavor-packaging-defaults/34061?u=d0od">drop Flatpak</a> in favor of <code>snap</code>, which is their own alternative that is much less popular. <code>snap</code> packages <a href="https://askubuntu.com/questions/1185091/why-apt-package-chromium-browser-installs-snap-package-instead">masquerade as traditional packages</a>, which can cause confusion for new users. They also <a href="https://forum.snapcraft.io/t/sudo-snap-install-or-just-snap-install/3909">encourage users to sign up an Ubuntu One account</a> just to install <code>snap</code> packages without root.</p>
</section>
<section id="speed-of-adopting-new-technologies" class="level1">
<h1>Speed of adopting new technologies</h1>
<p>Fedora tends to adopt new technologies at a fast pace, such as <code>Wayland</code>, swap on <code>ZRAM</code>, <code>Flatpak</code>, <code>PipeWire</code>, <code>btrfs</code> etc. New technologies tends to offer improvements in terms of usability and security.</p>
<p>For example, Fedora adopted <code>Wayland</code> in 2016, but Ubuntu only done so in 2021. Even Red Hat Enterprise Linux (RHEL) and Debian adopted <code>Wayland</code> in 2019, earlier than Ubuntu, despite both being extremely conservative distros.</p>
</section>
<section id="whats-next" class="level1">
<h1>What’s next?</h1>
<p>If you just want a usable system with no interest in learning more about the Linux ecosystem, then I believe Fedora is the ideal choice. However, I do not encourage people to stay on Fedora for the rest of their Linux journey. Rather, one should try out different Linux distros and explore alternatives to learn more about the Linux ecosystem.</p>
<p>Eventually, as you gain more understanding of the Linux ecosystem, you will develop your own opinions on things. For example, you might be <a href="https://flatkill.org/2020/">against Flatpak</a>, or perhaps you might think that <a href="https://nosystemd.org/">systemd has major problems</a>. Regardless, the greatest strength of the Linux ecosystem is the power to make your own choices on what software and technologies you prefer.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>software</category>
  <category>linux</category>
  <guid>https://jianweicheong.codeberg.page/posts/why-fedora.html</guid>
  <pubDate>Fri, 31 Mar 2023 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
