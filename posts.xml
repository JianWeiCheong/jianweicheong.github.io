<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Jian Wei Cheong</title>
<link>https://jianweicheong.codeberg.page/posts.html</link>
<atom:link href="https://jianweicheong.codeberg.page/posts.xml" rel="self" type="application/rss+xml"/>
<description>Personal page of Jian Wei Cheong</description>
<generator>quarto-1.7.34</generator>
<lastBuildDate>Fri, 29 Aug 2025 16:00:00 GMT</lastBuildDate>
<item>
  <title>Scientific colormaps and why you should care</title>
  <link>https://jianweicheong.codeberg.page/posts/colormaps.html</link>
  <description><![CDATA[ 




<section id="a-case-study" class="level1 page-columns page-full">
<h1>A case study</h1>
<p>What’s the difference between these two colormaps?</p>
<p>Which do we choose to plot our results in?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/posts/scientific-colormaps/jet_turbo.svg" class="img-fluid figure-img"></p>
<figcaption>Two similar looking colormaps.</figcaption>
</figure>
</div>
<p>Despite the fact that visualizations of scientific results or data are enshrined in journals that lives on after we are gone, most of us put little thoughts on the colormaps that we plot our results in.</p>
<p>I mean, who has the time to care about this? Much less two that hardly look any different! Most will just stick to the default that their plotting programs/libraries chose. In fact, the first colormap of the two was the default used by Matlab and Matplotlib up till around 2015.</p>
<p>But what if I told you that these two colormaps look quite different to people with <a href="https://en.wikipedia.org/wiki/Color_blindness">color vision deficiency (CVD)</a>, and that the first colormap can and has been shown to <strong>misrepresent scientific results</strong>?</p>
<p>The first colormap is the infamous <code>jet</code> (sometimes referred to as “rainbow”), and people have been pleading for the end of its use for a long time<sup>1</sup>. In the extreme, it might even lead to harmful consequences such as medical diagnostic errors <span class="citation" data-cites="BorkinEvaluation2011">(Borkin et al. 2011)</span>!</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;See <a href="https://www.kennethmoreland.com/color-maps/">this</a>, <a href="https://jakevdp.github.io/blog/2014/10/16/how-bad-is-your-colormap/">this</a>, or <a href="https://www.nature.com/articles/519291d">this</a>, and <a href="https://www.climate-lab-book.ac.uk/2014/end-of-the-rainbow/">this</a>, <a href="https://medvis.org/2012/08/21/rainbow-colormaps-what-are-they-good-for-absolutely-nothing/">this</a>, <a href="https://brushingupscience.com/2015/12/15/stop-using-rainbow-colourmaps/">this</a>, or <a href="https://agilescientific.com/blog/2017/12/14/no-more-rainbows">this</a>. Seriously, there are a lot.</p></div><div id="fn2"><p><sup>2</sup>&nbsp;Non-uniformity is akin to having a non-uniform scale such as the log-scale, e.g., the <code>jet</code> colormap has a long region of blue which rapidly jumps to cyan then green. The two bright bands of cyan and yellow are also examples of non-linearity.</p></div></div><p>As I found out recently, the use of colormaps in scientific visualization is actually quite well-studied <span class="citation" data-cites="LandiniColor2011 KovesiColour2015 ZhouSurvey2016">(Landini and Perryer 2011; Kovesi 2015; Zhou and Hansen 2016)</span>, and it is widely accepted that <strong>colormaps should be perceptually uniform, linear, and CVD-friendly</strong> (or continue to be perceptually uniform and linear for people with CVD)<sup>2</sup>.</p>
<p>The <code>jet</code> colormap fails all three conditions, and thus can easily mislead or misrepresent scientific results. Small differences in values are emphasized if it happens to lie on the cyan-green-yellow region, but greater differences that lies along the blue or red regions are hidden instead. It can also create misleading boundaries in results where there are none due to the sharp cyan and yellow regions.</p>
<p>These shortcomings are why Matlab and Matplotlib eventually developed new colormaps as replacements around 2015; Matlab developed <a href="https://www.mathworks.com/help/matlab/ref/parula.html"><code>parula</code></a>, and Matplotlib made the now popular <a href="https://bids.github.io/colormap/"><code>viridis</code> and a few others</a><sup>3</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;These <a href="https://www.youtube.com/watch?v=xAoljeRJ3lU">two</a> <a href="https://www.youtube.com/watch?v=XjHzLUnHeM0">talks</a> at the SciPy 2015 conference are great if you want to know more about the problems of “rainbow” colormaps, and on what makes a good colormap for scientific visualization.</p></div></div><p>But yet, <code>jet</code> remains somewhat prevalent as <a href="https://brushingupscience.com/2019/10/01/default-colormaps-are-parula-and-viridis-really-an-improvement-over-jet/">some researchers find it hard to give up on it</a> (I spotted some in the wild as recent as this year). This <a href="https://research.google/blog/turbo-an-improved-rainbow-colormap-for-visualization/">led Google to develop the second colormap above, <code>turbo</code></a>, which retains the rainbow color but is supposed to be an improvement over <code>jet</code>. Though it is still not ideal and <a href="https://mpetroff.net/2019/08/discernibility-of-rainbow-colormaps/">there are some criticisms of it</a>. One user on HackerNews even <a href="https://news.ycombinator.com/item?id=20754998">joked that</a>:</p>
<blockquote class="blockquote">
<p>“One good use for this new color map might be: ‘My ignorant boss keeps insisting on using the jet color map even though it is terrible. I can drop this one in and he won’t notice the difference but it will be somewhat better, even if still problematical in many ways.’”</p>
</blockquote>
<p>You see, I believe that it our responsibility to not only ensure that scientific results are not misrepresented, but also to ensure that it is accessible to people with CVD.</p>
<p>A typical plotting library will provide a myriad of different colormaps, and one should have some restrain to not choose a colormap too freely.</p>
</section>
<section id="so-which-colormap" class="level1 page-columns page-full">
<h1>So which colormap?</h1>
<p>Neither <code>jet</code> nor <code>turbo</code>. Just do not use “rainbow” colormaps (in 99.9% of all cases) regardless of whether you need a sequential or diverging colormap.</p>
<p>But a lot of these programs favors quantity over quality. How do I know if that pretty colormap my favorite plotting library provided is perceptually uniform, linear, and CVD-friendly?</p>
<p>Generally, one just have to know the families of colormaps that were designed with these standards in mind, and plotting libraries with good documentations tend to properly group them into these families, e.g., take a look at <a href="https://juliagraphics.github.io/ColorSchemes.jl/stable/catalogue/">Julia’s</a> where anything grouped under “scientific” or “colorcet” are generally fine.</p>
<p>Nevertheless, here are some general recommendations:</p>
<p><a href="https://matplotlib.org/stable/users/explain/colors/colormaps.html#sequential">Matplotlib’s default</a>, <code>viridis</code>, and a CVD-friendlier version by <span class="citation" data-cites="NunezOptimizing2018">Nuñez, Anderton, and Renslow (2018)</span>, <code>cividis</code>, which I prefer, will suffice for most sequential plots. Though, <code>batlow</code> by <a href="https://www.fabiocrameri.ch/colourmaps/">Fabio Crameri</a> is another favorite and is scientifically derived <span class="citation" data-cites="CrameriThe2020">(Crameri, Shephard, and Heron 2020)</span>. <a href="https://colorcet.com/">ColorCET</a> by <span class="citation" data-cites="KovesiColour2015">Kovesi (2015)</span> also has the CVD-friendly colormap <code>CET-CBL1</code>. All these are good and are widely available in various programs and plotting libraries.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/posts/scientific-colormaps/colormaps_seq.svg" class="img-fluid figure-img"></p>
<figcaption>Sequential colormaps.</figcaption>
</figure>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41467-020-19160-7/MediaObjects/41467_2020_19160_Fig1_HTML.png?as=webp" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41467-020-19160-7/MediaObjects/41467_2020_19160_Fig1_HTML.png?as=webp" class="img-fluid"></a></p>
<p>Reprinted from <span class="citation" data-cites="CrameriThe2020">Crameri, Shephard, and Heron (2020)</span>.</p>
<p>Comparison between <code>jet</code> and <code>batlow</code>.</p>
<p>Also check out <a href="https://www.youtube.com/watch?v=iDPzWARbFrs">his talk</a> at the University of Oslo <a href="https://www.mn.uio.no/geo/english/about/organisation/geohyd/events/archive/2021/">GEOHYD Lunch Seminar 2021</a>.</p>
</div></div><p>For diverging colormaps, there’s <a href="https://colorbrewer2.org/">ColorBrewer’s</a> <code>RdBu</code>, ColorCET’s <code>CET-D07</code>, or the CVD-friendlier <code>CET-CBD1</code>, though you can’t really go wrong with the rest of the colormaps by Fabio Crameri either (Matplotlib provides Crameri’s <code>berlin</code>, <code>managua</code>, and <code>vanimo</code>).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/posts/scientific-colormaps/colormaps_div.svg" class="img-fluid figure-img"></p>
<figcaption>Diverging colormaps.</figcaption>
</figure>
</div>
<p>Crameri also has some bi-sequential colormaps that are useful for topographical plots. The only other I know of is <a href="https://matplotlib.org/cmocean/">cmocean’s</a> <code>topo</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/posts/scientific-colormaps/colormaps_bi.svg" class="img-fluid figure-img"></p>
<figcaption>Bi-sequential colormaps.</figcaption>
</figure>
</div>
<p>Overall, when in doubt, stick to <code>viridis</code>, <code>cividis</code>, and the colormaps by Crameri.</p>
</section>
<section id="what-about-color-cyclessequences" class="level1 page-columns page-full">
<h1>What about color cycles/sequences?</h1>
<p>Color cycles/sequences too are important in scientific visualization given how much more common qualitative/categorical plots are. The only concern is to be perceptually distinguishable, even for people with CVD. However, there are very little consensus on them, and it seems that different programs or libraries often pick their own based on subjective reasoning or aesthetics.</p>
<p>For example, the familiar Matplotlib’s palette (also used by <a href="https://vega.github.io/vega/docs/schemes/#category10">Vega</a>, <a href="https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#category10">d3</a>, <a href="https://plotly.com/python/discrete-color/#color-sequences-in-plotly-express">plotly</a> and various others) often seen in published plots were simply <a href="https://matplotlib.org/stable/users/prev_whats_new/dflt_style_changes.html#colors-in-default-property-cycle">adopted from Tableau</a><sup>4</sup>, and <a href="https://dovydas.com/blog/colorblind-friendly-diagrams">is not CVD-friendly</a> despite its widespread usage! A number of the colors in the palette are not perceptually distinct to people with CVD (see “Category 10” in the margin figure below).</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;Tableau has since <a href="https://www.tableau.com/blog/colors-upgrade-tableau-10-56782">changed to a newer palette</a> based yet again on subjective senses of aesthetic.</p></div></div><p>Still, there have been some attempts to look for CVD-friendly color cycles. For example, the palettes by <a href="https://sronpersonalpages.nl/~pault/#sec:qualitative">Paul Tol</a> and the ones by <a href="https://web.archive.org/web/20030821055411/http://jfly.iam.u-tokyo.ac.jp/color/text.html">Okabe and Ito</a> are quite well-known, especially after the latter was brought to light again by <span class="citation" data-cites="WongPoints2011">Wong (2011)</span> (and thus often misattributed to him, e.g., in Julia’s <a href="https://docs.makie.org/stable/explanations/colors#Colormaps">Makie.jl</a>). <a href="https://www.youtube.com/watch?v=XJcnxmGrxVY">Crameri too proposed a palette</a> using <code>batlow</code>, though it is only perceptually distinct for roughly the first five colors.</p>
<p>As far as I’m aware, the most thorough study that attempts to balance CVD-friendliness and aesthetics were conducted by <span class="citation" data-cites="PetroffColor2024">Petroff (2024)</span>, which features a distance metric to measure perceptual distinguishability (including with CVD), and an online survey with 22000 responses that ranks aesthetical preferences. This resulted in 3 palettes of 6, 8, and 10 colors which I am quite fond of. They are also the default used in <a href="https://lilaq.org/docs/reference/color#qualitative-color-maps">Typst’s Lilaq plotting library</a>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="../media/posts/scientific-colormaps/petroff.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://jianweicheong.codeberg.page/media/posts/scientific-colormaps/petroff.png" class="img-fluid"></a></p>
<p>Reprinted from <span class="citation" data-cites="PetroffColor2024">Petroff (2024)</span>.</p>
<p>Petroff also calculated the perceptual distinguishability of other common color cycles (higher is better).</p>
</div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/posts/scientific-colormaps/colorcycles.svg" class="img-fluid figure-img"></p>
<figcaption>CVD-friendly color cycles.</figcaption>
</figure>
</div>
<p>Looking at Petroff’s analysis (see figure in the margin), there isn’t a lot of color cycles that are CVD-friendly, so it’s better to stick to Petroff’s color palettes. However, since they are typically not readily available, Okabe’s and Ito’s, and Crameri’s <code>batlowS</code> (up till the first 5 colors) are good alternatives.</p>
<p>Paul Tol’s “Tol Bright” is also CVD-friendly, but only for people with deuteranopia and protanopia. People with the much less common tritanopia would struggle with it<sup>5</sup>, which is why it has a low score in Petroff’s analysis.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;According to <a href="https://en.wikipedia.org/wiki/Color_blindness#Based_on_severity">Wikipedia</a> only <img src="https://latex.codecogs.com/png.latex?0.015%5C%25"> of individuals has tritanopia, which is an order of magnitude less than deuteranopia and protanopia. This is around 1000 people in the entire country of Singapore.</p></div></div></section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>While it’s true that most reputable journals will require plots to be understandable in grayscale, i.e., relying on line style/shape in line and scatter plots, or roughly ensuring the <a href="https://en.wikipedia.org/wiki/Lightness">lightness</a> ordering of colormaps, most readers are reading the colored version on a computer, and color remains an important factor and tool in scientific visualization.</p>
<p>It can emphasize, direct, focus, mislead or misrepresent scientific results. Instead of just choosing a colormap or palette based on whether it looks aesthetically pleasing to our eyes, more care and responsibility should be taken in choosing one that is perceptually uniform and linear to not mislead, and one that is CVD-friendly to be accessible to more readers.</p>



</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-BorkinEvaluation2011" class="csl-entry">
Borkin, M., K. Gajos, A. Peters, D. Mitsouras, S. Melchionna, F. Rybicki, C. Feldman, and H. Pfister. 2011. <span>“Evaluation of Artery Visualizations for Heart Disease Diagnosis.”</span> <em>IEEE Transactions on Visualization and Computer Graphics</em> 17 (12): 2479–88. <a href="https://doi.org/10.1109/tvcg.2011.192">https://doi.org/10.1109/tvcg.2011.192</a>.
</div>
<div id="ref-CrameriThe2020" class="csl-entry">
Crameri, Fabio, Grace E. Shephard, and Philip J. Heron. 2020. <span>“The Misuse of Colour in Science Communication.”</span> <em>Nature Communications</em> 11 (1). <a href="https://doi.org/10.1038/s41467-020-19160-7">https://doi.org/10.1038/s41467-020-19160-7</a>.
</div>
<div id="ref-KovesiColour2015" class="csl-entry">
Kovesi, Peter. 2015. <span>“Good Colour Maps: How to Design Them.”</span> <a href="https://arxiv.org/abs/1509.03700">https://arxiv.org/abs/1509.03700</a>.
</div>
<div id="ref-LandiniColor2011" class="csl-entry">
Landini, Gabriel, and D Giles Perryer. 2011. <span>“More on Color Blindness.”</span> <em>Nature Methods</em> 8 (11): 891–91. <a href="https://doi.org/10.1038/nmeth.1737">https://doi.org/10.1038/nmeth.1737</a>.
</div>
<div id="ref-NunezOptimizing2018" class="csl-entry">
Nuñez, Jamie R., Christopher R. Anderton, and Ryan S. Renslow. 2018. <span>“Optimizing Colormaps with Consideration for Color Vision Deficiency to Enable Accurate Interpretation of Scientific Data.”</span> Edited by Jesús Malo. <em>PLOS ONE</em> 13 (7): e0199239. <a href="https://doi.org/10.1371/journal.pone.0199239">https://doi.org/10.1371/journal.pone.0199239</a>.
</div>
<div id="ref-PetroffColor2024" class="csl-entry">
Petroff, Matthew A. 2024. <span>“Accessible Color Sequences for Data Visualization.”</span> <a href="https://arxiv.org/abs/2107.02270">https://arxiv.org/abs/2107.02270</a>.
</div>
<div id="ref-WongPoints2011" class="csl-entry">
Wong, Bang. 2011. <span>“Points of View: Color Blindness.”</span> <em>Nature Methods</em> 8 (6): 441–41. <a href="https://doi.org/10.1038/nmeth.1618">https://doi.org/10.1038/nmeth.1618</a>.
</div>
<div id="ref-ZhouSurvey2016" class="csl-entry">
Zhou, Liang, and Charles D. Hansen. 2016. <span>“A Survey of Colormaps in Visualization.”</span> <em>IEEE Transactions on Visualization and Computer Graphics</em> 22 (8): 2051–69. <a href="https://doi.org/10.1109/tvcg.2015.2489649">https://doi.org/10.1109/tvcg.2015.2489649</a>.
</div>
</div></section></div> ]]></description>
  <category>programming</category>
  <guid>https://jianweicheong.codeberg.page/posts/colormaps.html</guid>
  <pubDate>Fri, 29 Aug 2025 16:00:00 GMT</pubDate>
</item>
<item>
  <title>The Betty Hill Star Map: Where are my aliens from?</title>
  <link>https://jianweicheong.codeberg.page/posts/betty-hill-star-map.html</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Disclaimer
</div>
</div>
<div class="callout-body-container callout-body">
<p>I apologize for the lack of sources provided in this post. It is quite difficult to find accessible primary sources, especially for these kinds of topics where most details are only accounted in books that are not freely available. If you do not see a source, take it with a grain of salt.</p>
</div>
</div>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">Here’s a Grey alien from Wikipedia. <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Greylien.png/120px-Greylien.png" class="img-fluid" style="width:25.0%"></span></div></div>
<p>In <a href="https://en.wikipedia.org/wiki/Ufology">Ufology</a> “lore”, it is widely accepted/parroted that the well-known, short, enlarged head, with large black eyes, <a href="https://en.wikipedia.org/wiki/Grey_alien">Grey alien</a> comes from the <a href="https://en.wikipedia.org/wiki/Zeta_Reticuli">Zeta Reticuli</a> binary star system.</p>
<p>This is due to a myriad of (supposedly) independent “abductees”, “contactees”, or “insiders”, who have made mentions of Zeta Reticuli (as well as its association with the Greys) in their “lore”, e.g., Bob Lazar, Project Serpo, David Icke, Ashtar, Cosmic Awareness, or the various “Galactic Federation” “<a href="https://en.wikipedia.org/wiki/New_Age#Spirit_and_channeling">channelings</a>”<sup>1</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;I’m not going to provide sources for these, but I have around 2 decades of exposure to these stuffs and can thus speak from experience.</p></div></div><p>The very first association (as far as I know) of these Greys with the Zeta Reticuli star system originates from the <a href="https://en.wikipedia.org/wiki/Barney_and_Betty_Hill_incident">Barney and Betty Hill incident</a> back in the 1960s. Particularly, from this incident came a “star map”, crudely drawn from memory under <a href="https://en.wikipedia.org/wiki/Recovered-memory_therapy">hypnotic regression</a> 2 years after the alleged incident, which vaguely resembles a constellation of stars that include the Zeta Reticuli binary star system.</p>
<p>Today, let us examine this star map with modern tools and data, and determine if there is any credence to this association with the Zeta Reticuli star system.</p>
<p>But first, let us have some context.</p>
<section id="the-barney-and-betty-hill-incident-abridged" class="level1 page-columns page-full">
<h1>The Barney and Betty Hill Incident (abridged)</h1>
<p>On the night of 19 September 1961, American couple Barney and Betty Hill observed a light in the sky while they were driving home from vacation on some stretches of deserted roads. They stopped occasionally to observe the light with their binoculars, and eventually surmise that the light is a UFO after it descended towards their vehicle.</p>
<p>Barney observed the object with the binoculars, spotting some humanoid figures looking out of the craft’s windows. As the craft approached closer, the Hills drove away in fear of being captured. Afterward, they experienced some “missing time” where there are gaps in their memory<sup>2</sup> before they returned home.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;The experience of “missing time” is quite common among alien abduction stories.</p></div></div><p>I encourage the interested reader to read the fascinating full story themselves, but our concern here is the star map, which comes 2 years after this incident.</p>
<p>Around 2 years later, under some advice, the Hills underwent hypnosis sessions with Dr.&nbsp;Benjamin Simon to “recover” lost/repressed memories of the incident<sup>3</sup>. This was when the encounter with the UFO became an abduction story, as Barney and Betty Hill recalled (under hypnosis) that they were abducted onto the UFO, and have their memories repressed by the aliens afterward.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;Note that such <a href="https://en.wikipedia.org/wiki/Recovered-memory_therapy">recovered-memory therapy</a> are considered pseudoscience, and there is no evidence that it is effective in recovering accurate memories, much less memories repressed by alien technologies.</p></div><div id="fn4"><p><sup>4</sup>&nbsp;I guess saying something like “we are from what your people call Zeta Reticuli” was too difficult? Another story where the aliens were evasive when asked about their origin is the story of Charles Hall and the “Tall Whites”, where the Tall Whites alien responded by asking if Charles knew the name of the stars the Tall Whites used, and if not, then why does he want to know?</p></div></div><p>Betty Hill recalled (under hypnosis) that while abducted on the UFO, she asked the “leader” of the Grey-looking aliens where they came from. The leader then took out a 2D sheet depicting a “star map” (that looked 3D from the angle Betty viewed it from). Betty asked where the leader’s “home port” was, and the leader responded by asking Betty where Earth was on the map, before saying that if Betty did not know where she is then there is no point in telling her where he is from<sup>4</sup>.</p>
<p>From this hypnosis session, Betty Hill drew this “star map” that she recalled, which arguably is now the most well-known part of the story, and eventually led to the association of Zeta Reticuli with the Grey aliens.</p>
</section>
<section id="the-star-map" class="level1 page-columns page-full">
<h1>The Star Map</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../media/posts/betty-hill-star-map/betty_original.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Betty Hill’s Star Map"><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/betty_original.jpg" class="img-fluid figure-img" style="width:60.0%" alt="Betty Hill’s Star Map"></a></p>
<figcaption>Betty Hill’s Star Map</figcaption>
</figure>
</div>
<p>According to the “leader” alien, the heavy lines are trade routes, the lighter lines are places they occasionally visit, and the broken (dotted) lines are expeditions.</p>
<p>One would think that given the large number of stars in the galaxy (or even in just our local stellar neighborhood), it is impossible to determine anything substantial from some arbitrarily connected dots and circles. Yet, this did not deter people from trying to interpret the star systems shown in the star map.</p>
<p>While many interpretations of the star map exist, e.g., by <a href="https://www.bibliotecapleyades.net/vida_alien/astrometrics/images/bfig11-2.gif">Charles W. Atterberg</a>, <a href="https://www.kochkyborg.de/BBHill/hill07.htm">Joachim Koch and Hans-Jürgen Kyborg</a>, or Steve Pearse, the most famous interpretation is by an elementary schoolteacher and amateur astronomer Marjorie Fish in 1969.</p>
<p>We will only examine Fish’s interpretation as it is the most popular, and is the reason for the association between the Grey aliens and the Zeta Reticuli binary star system.</p>
<section id="fishs-interpretation" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="fishs-interpretation">Fish’s interpretation</h2>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">For the convenience of the reader (click to enlarge). <a href="../media/posts/betty-hill-star-map/betty_original.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/betty_original.jpg" class="img-fluid"></a></span></div></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../media/posts/betty-hill-star-map/fishmap_better2.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Marjorie Fish’s intepretation of the star map using data from the Gliese catalog."><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/fishmap_better2.jpg" class="img-fluid figure-img" alt="Marjorie Fish’s intepretation of the star map using data from the Gliese catalog."></a></p>
<figcaption>Marjorie Fish’s intepretation of the star map using data from the <a href="https://en.wikipedia.org/wiki/Gliese_Catalogue_of_Nearby_Stars">Gliese catalog</a>.</figcaption>
</figure>
</div>
<p>Admittedly, it looks quite similar to Betty Hill’s star map, and even more impressive is that this interpretation was derived from physical models of nearby stars (assuming our Sun is in the star map) that Fish herself built using data from the Gliese catalog.</p>
<p>Due to the large numbers of stars, <a href="https://www.nicap.org/reports/hillmap.htm">Fish filtered out stars based on exobiological considerations</a>. It took years but she succeeded in finding a constellation of stars and vantage point that resembles Betty Hill’s star map using her homemade model.</p>
<p>There are a lot of differences however, e.g., the line to Alpha Mensae is much longer than in Betty Hill’s star map, while the line to Gliese 86 is much shorter. The distance between Tau Ceti and 82 Eridani is also much shorter than expected. All in all, it is not a perfect match.</p>
<p>Despite that, Fish’s interpretation became so popular that it was even <a href="https://www.youtube.com/watch?v=YEaucytiEwM">discussed by Carl Sagan on <em>Cosmos</em></a><sup>5</sup>. Sagan’s argument is that if one can pick and choose from a large number of stars from any vantage point, then one can always find a constellation of stars that resembles Betty Hill’s star map<sup>6</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;Sagan demonstrated that by removing the lines, there are hardly any resemblance between the two maps at all. <a href="../media/posts/betty-hill-star-map/sagan_comparison.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/sagan_comparison.png" class="img-fluid"></a></p></div><div id="fn6"><p><sup>6</sup>&nbsp;More on this later as we attempt to try this out for ourselves.</p></div></div><p>Nevertheless, the most significant result of Fish’s interpretation is that the two big circles (often thought of as the home systems of the aliens) turns out to be the Zeta Reticuli binary star system. This is what sparked the beginning of the association between Grey-type aliens and Zeta Reticuli.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Misleading visuals of Fish’s interpretation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The reader should take note that there are various misleading visualizations of the Fish’s interpretation that are often being shared online. These misleading visuals exaggerate the similarity between Fish’s interpretation and Betty Hill’s star map. Some examples are the one on Wikipedia:</p>
<p><a href="../media/posts/betty-hill-star-map/fishmap_misleading1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/fishmap_misleading1.png" class="img-fluid" style="width:65.0%"></a></p>
<p>and this one that is often shared on social medias that is just blatantly misleading:</p>
<p><a href="../media/posts/betty-hill-star-map/fishmap_misleading2.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/fishmap_misleading2.jpg" class="img-fluid" style="width:50.0%"></a></p>
</div>
</div>
</div>
</section>
<section id="reproducing-fishs-interpretation" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="reproducing-fishs-interpretation">Reproducing Fish’s Interpretation</h2>
<p>Let us attempt to reproduce Fish’s results by using the <a href="https://en.wikipedia.org/wiki/Hipparcos">Hipparcos catalog</a> from the 1990s<sup>7</sup>, which contains much more precise data than the Gliese catalog that Fish used in 1969. Specifically, we will create a 3D model of nearby stars within 30 parsecs of our Solar System.</p>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;The Gaia catalog was considered, but it excludes a number of bright stars and the star designations are too long and cumbersome to work with.</p></div></div><p>The lines of codes are quite short, and I encourage the interested reader who wants their own 3D model to follow along, especially if one has experience in Python.</p>
<section id="getting-the-positions-of-nearby-stars" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-positions-of-nearby-stars">Getting the positions of nearby stars</h3>
<p>We can easily retrieve the catalog as a <a href="https://pandas.pydata.org/"><em>pandas</em></a> dataframe in Python with the <a href="https://rhodesmill.org/skyfield/"><em>Skyfield</em></a> package.</p>
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Skip this if you are not interested.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skyfield.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Star, load</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skyfield.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hipparcos</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> load.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(hipparcos.URL) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-7">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hipparcos.load_dataframe(f)</span></code></pre></div>
<p>To get the positions of nearby stars relative to our Sun, we first retrieve the <a href="https://en.wikipedia.org/wiki/Jet_Propulsion_Laboratory_Development_Ephemeris">JPL ephemeris DE421</a>, which contains the positions of major bodies in the Solar System from 1900–2050, before finding the Sun’s position relative to the Solar System’s barycenter on 19 September 1961.</p>
<p>These are actually mostly unneeded information, but <em>Skyfield</em> requires a <em>Barycentric</em> object to retrieve the observed position of stars with respect to that object’s position at a certain time, and we will have to make do since we want <em>Skyfield</em> to do the calculations for us.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">eph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"de421.bsp"</span>)</span>
<span id="cb2-2">sun <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eph[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sun"</span>]</span>
<span id="cb2-3"></span>
<span id="cb2-4">ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load.timescale()</span>
<span id="cb2-5">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ts.utc(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1961</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-6">sun_barycentric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sun.at(t)</span></code></pre></div>
<p>Next, we let <em>Skyfield</em> calculate the observed position (in terms of <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y">, <img src="https://latex.codecogs.com/png.latex?z"> coordinates and distance relative to the Sun) of each star in the dataframe of the catalog, before storing them in their corresponding list. We also convert the units from <a href="https://en.wikipedia.org/wiki/Astronomical_unit">AU (astronomical unit)</a> to <a href="https://en.wikipedia.org/wiki/Parsec">parsec</a> as it’s easier to work with. Note that <code>hips</code> contains each star’s designation in the catalog, e.g., the star Sirius has the designation HIP 32349.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">au_1_parsec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">206265</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">distances_pc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-4">coords_pc_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-5">coords_pc_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-6">coords_pc_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-7">hips <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.iterrows():</span>
<span id="cb3-9">    star <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Star.from_dataframe(row)</span>
<span id="cb3-10">    star_astrometric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sun_barycentric.observe(star)</span>
<span id="cb3-11">    _, _, distance_au <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> star_astrometric.radec()</span>
<span id="cb3-12">    coords_au <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> star_astrometric.xyz</span>
<span id="cb3-13"></span>
<span id="cb3-14">    distances_pc.append(distance_au.au <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> au_1_parsec)</span>
<span id="cb3-15">    coords_pc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coords_au.au <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> au_1_parsec</span>
<span id="cb3-16">    coords_pc_x.append(coords_pc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb3-17">    coords_pc_y.append(coords_pc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-18">    coords_pc_z.append(coords_pc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb3-19">    hips.append(i)</span></code></pre></div>
<p>Finally, we store these data for each star in a new dataframe, filtered it such that we only keep stars within 30 parsecs (~100 light years), leaving us with just 2350 stars, before saving it to a CSV file.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb4-2">    np.array([hips, coords_pc_x, coords_pc_y, coords_pc_z, distances_pc]).T,</span>
<span id="cb4-3">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hip"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coords_x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coords_y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coords_z"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distances"</span>],</span>
<span id="cb4-4">)</span>
<span id="cb4-5"></span>
<span id="cb4-6">df_near <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_new[df_new[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distances"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>]</span>
<span id="cb4-7">df_near.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"30pc_stars.csv"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
</div>
</div>
<p>Note that the obtained positions are the <strong>observed positions</strong> from our Solar System, that is, the stars actual positions would have changed due to the time it takes for light from these stars to reach us, and an alien star map would probably use the latter instead of the observed positions, let alone <em>our</em> observed positions. However, the difference are negligible and this save us some calculations, so we will stick with this.</p>
</section>
<section id="plotting-the-nearby-stars" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="plotting-the-nearby-stars">Plotting the nearby stars</h3>
<p>Next, we will plot these 2350 stars (+ the Sun) in <a href="https://www.blender.org/download/">Blender</a>. Blender is chosen because it’s fun, and it’s easy to control and animate the camera when we are looking for different vantage points. The hybrid graphical and Python workflow also greatly makes our lives easier as Python can programmatically handle the placing of the 2350 stars at the right position, while I can easily change the looks of the stars in Blender’s GUI<sup>8</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;One can also use programs like <a href="https://gaiasky.space/">Gaia Sky</a> or <a href="https://spaceengine.org/">Space Engine</a> to do their own investigation.</p></div></div><div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Skip this if you are not interested
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>First, let us load the CSV file that we saved earlier and store them in the list <code>stars</code>.</p>
<p>It’s quite troublesome to install external packages to Blender’s builtin Python, and so we used the builtin <code>csv</code> package instead of <code>pandas</code> dataframe this time.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> bpy</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"30pc_stars.csv"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-5">    reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.DictReader(f, delimiter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">    stars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reader:</span>
<span id="cb5-9">        stars.append(entry)</span></code></pre></div>
<p>In Blender, I have prepared different <em>materials</em> for the Sun (<code>sun</code>), stars in Fish’s interpretations (<code>starmap</code>), and the rest of the stars (<code>starlight</code>). We can refer to these materials in Python as follows.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">sun_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bpy.data.materials.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sun"</span>)</span>
<span id="cb6-2">starmap_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bpy.data.materials.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"starmap"</span>)</span>
<span id="cb6-3">starlight_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bpy.data.materials.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"starlight"</span>)</span></code></pre></div>
<p>I also made a helper function to easily place stars as <em>UV spheres</em>.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> uv_sphere_add(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)):</span>
<span id="cb7-2">    bpy.ops.mesh.primitive_uv_sphere_add(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius, location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>location)</span>
<span id="cb7-3">    obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bpy.context.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span></span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> name:</span>
<span id="cb7-5">        obj.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> obj</span></code></pre></div>
<p>Creating the Sun and adding the <code>sun</code> material to it is as simple as</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">sun_obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uv_sphere_add(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sun"</span>, location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb8-2">sun_obj.data.materials.append(sun_mat)</span></code></pre></div>
<p>We can now repeat the process for each star. By checking the HIP designations of the stars in Fish’s interpretation, we can change the materials of these stars to the <code>starmap</code> material, while keeping the <code>starlight</code> material for the rest of the stars. Also note that we scaled the positions up by a factor of 10, i.e., 1 parsec correspond to 10 units of distance in Blender.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">fish_starmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"15330.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"15371.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"29271.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"15510.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10138.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8102.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7981.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3093.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7918.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12843.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7235.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"11072.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10798.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10164.0"</span>,</span>
<span id="cb9-3">]</span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> star <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stars:</span>
<span id="cb9-5">    star_obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uv_sphere_add(</span>
<span id="cb9-6">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb9-7">        name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>star[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hip"</span>],</span>
<span id="cb9-8">        location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(</span>
<span id="cb9-9">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(star[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coords_x"</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb9-10">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(star[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coords_y"</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb9-11">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(star[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coords_z"</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb9-12">        ),</span>
<span id="cb9-13">    )</span>
<span id="cb9-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> star[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hip"</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fish_starmap:</span>
<span id="cb9-15">        star_obj.data.materials.append(starmap_mat)</span>
<span id="cb9-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb9-17">        star_obj.data.materials.append(starlight_mat)</span></code></pre></div>
</div>
</div>
</div>
<p>There we have it, we now have a 3D model of 2350 stars within 30 parsecs of our Sun.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="../media/posts/betty-hill-star-map/30pc_spin_fade_connections.webm" class="img-fluid" loop="true" autoplay="true" controls=""><a href="../media/posts/betty-hill-star-map/30pc_spin_fade_connections.webm">Video</a></video></p>
<figcaption>Animation of stars within 30 parsecs, with stars from Fish’s interpretation colored red, and our Sun colored yellow.</figcaption>
</figure>
</div>
<p>After connecting the stars accordingly, we can find a vantage point that roughly matches with Fish’s interpretation.</p>
<p><video src="../media/posts/betty-hill-star-map/fish_map_animation.webm" class="img-fluid" loop="true" autoplay="true" controls=""><a href="../media/posts/betty-hill-star-map/fish_map_animation.webm">Video</a></video></p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">For the convenience of the reader (click to enlarge). <a href="../media/posts/betty-hill-star-map/fishmap_better2.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/fishmap_better2.jpg" class="img-fluid"></a><a href="../media/posts/betty-hill-star-map/betty_original.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/betty_original.jpg" class="img-fluid"></a></span></div></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../media/posts/betty-hill-star-map/fishmap.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-9" title="3D reproduction of Fish’s interpretation of Betty Hill’s star map."><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/fishmap.jpg" class="img-fluid figure-img" alt="3D reproduction of Fish’s interpretation of Betty Hill’s star map."></a></p>
<figcaption>3D reproduction of Fish’s interpretation of Betty Hill’s star map.</figcaption>
</figure>
</div>
<p>First of all, note that Kappa Fornacis is way off. This is due to the more precise data provided by the Hipparcos catalog as compared to the Gliese catalog that Marjorie Fish used. Likewise, Gliese 86.1 is actually nowhere close at almost 200 light years away and thus is missing.</p>
<p>These discrepancies were most likely also acknowledged by Marjorie Fish as new data came out<sup>9</sup>, and might be a deal-breaker as <a href="https://www.nicap.org/articles/hillzeta.htm">according to Fish’s account of her meeting with Betty Hill, Hill claimed to remember the distinctive triangle formation to the left in addition to the ones connected by lines</a>.</p>
<div class="no-row-height column-margin column-container"><div id="fn9"><p><sup>9</sup>&nbsp;Not that it matters, but according to her niece, <a href="https://badufos.blogspot.com/2013/07/rip-marjorie-fish-and-her-star-map.html?showComment=1377491596140#c4776630570236524431">Fish did not actually repudiate her star map</a>, and that her <a href="https://www.legacy.com/us/obituaries/portclintonnewsherald/name/marjorie-fish-obituary?id=15022043">obituary saying so</a> was in error.</p></div></div><p>Nevertheless, huge kudos to Marjorie Fish for producing her version of the star map by hand to such a great accuracy.</p>
</section>
</section>
</section>
<section id="is-the-star-map-even-useful" class="level1 page-columns page-full">
<h1>Is the Star Map even useful?</h1>
<p>As mentioned earlier, Carl Sagan argued that if one can pick and choose from a large number of stars and from any vantage point, one can always find a constellation of stars that resembles Betty Hill’s star map.</p>
<p>I have no doubt that we can indeed find our own star map that resembles Betty Hill’s from our stellar neighborhood (in fact I’ll present one later), but Marjorie Fish achieved this with less than 50 stars.</p>
<p>Is this possible?</p>
<section id="randomly-generated-stars" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="randomly-generated-stars">Randomly generated stars</h2>
<p>Here, I randomly generated 50 stars with uniformly distributed positions, and attempt to find a vantage point and constellation that resembles Betty Hill’s star map.</p>
<p>I assure you that there is no cherry-picking and I’m not just drawing lines on a 2D projection of the 50 stars either, but instead ensured that the star map made physical sense in terms of distances<sup>10</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn10"><p><sup>10</sup>&nbsp;Which is why it might look like there are better solutions that I didn’t take, but those solutions only work as a 2D projection from this vantage point, and not in terms of physical distance.</p></div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../media/posts/betty-hill-star-map/starmap_randoms.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10" title="3 star maps that somewhat resembles Betty Hill’s star map, created from 3 different sets of randomly generated 50 star positions."><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/starmap_randoms.png" class="img-fluid figure-img" alt="3 star maps that somewhat resembles Betty Hill’s star map, created from 3 different sets of randomly generated 50 star positions."></a></p>
<figcaption>3 star maps that somewhat resembles Betty Hill’s star map, created from 3 different sets of randomly generated 50 star positions.</figcaption>
</figure>
</div>
<p>As you can see, it seems that it’s not that difficult to find a constellation of stars that resembles Betty Hill’s star map from just 50 stars, even when these stars are not based on reality. In fact, each one took me just around 5 minutes.</p>
<p>These are of course not perfect matches (but neither are Fish’s, Atterberg’s, or Koch-Kyborg’s), and there might be better solutions if given enough time (or using some algorithmic method).</p>
</section>
<section id="a-new-interpretation-of-the-star-map" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="a-new-interpretation-of-the-star-map">A new interpretation of the star map</h2>
<p>Finally, let me present an alternate interpretation using just star systems in our local neighborhood of up to 22 light years (~7 parsecs) away from us, much closer than Fish’s and Atterberg’s interpretations.</p>
<p><video src="../media/posts/betty-hill-star-map/mine2_animation.webm" class="img-fluid" loop="true" autoplay="true" controls=""><a href="../media/posts/betty-hill-star-map/mine2_animation.webm">Video</a></video></p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">For the convenience of the reader (click to enlarge). <a href="../media/posts/betty-hill-star-map/fishmap.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/fishmap.jpg" class="img-fluid"></a><a href="../media/posts/betty-hill-star-map/betty_original.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/betty_original.jpg" class="img-fluid"></a></span></div></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../media/posts/betty-hill-star-map/mine2_starmap.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13" title="My interpretation of Betty Hill’s star map."><img src="https://jianweicheong.codeberg.page/media/posts/betty-hill-star-map/mine2_starmap.png" class="img-fluid figure-img" alt="My interpretation of Betty Hill’s star map."></a></p>
<figcaption>My interpretation of Betty Hill’s star map.</figcaption>
</figure>
</div>
<p>It’s not a perfect match, but again I emphasize that neither are Fish’s, Atterberg’s, or Koch-Kyborg’s.</p>
<p>It’s not difficult to find this constellation of stars either:</p>
<blockquote class="blockquote">
<p>Just by looking at prominent stars in the vicinity of our Solar System, I realized that the Bernard’s star, Proxima/Alpha Centuri, our Solar System, and Sirius, forms the “V” shape formation that appears on Betty Hill’s star map.</p>
<p>I then looked for stars in the “foreground” of this “V” shape formation and found Tau Ceti (and YZ Ceti). Quite coincidentally, slightly in front of Tau Ceti (and YZ Ceti) is GJ 1005, a binary star system, exactly what we need to match with Betty Hill’s star map.</p>
<p>82 G. Eridani seems to be the only possible candidate to the right of GJ 1005, and Van Maanen 2 is right above Tau Ceti (and YZ Ceti). It was then either Tau Ceti or YZ Ceti, Gliese 876 or HIP 114110, HR 7703 or Gliese 784, and Gliese 829 or Altair. I simply chose the ones that best matches with Betty Hill’s star map.</p>
</blockquote>
<p>In my opinion, my interpretation matches better with Betty Hill’s star map than Fish’s in certain parts. I even got the triangle formation on the left (by chance really, it was an afterthought)<sup>11</sup>. Furthermore, the vantage point is facing towards the galactic center, and is slightly above the galactic plane looking downwards, in other words it is not as arbitrary. A number of these star systems also have (or might have) exoplanets.</p>
<div class="no-row-height column-margin column-container"><div id="fn11"><p><sup>11</sup>&nbsp;If you are concerned about the lone unconnected star at the middle top part of Betty Hill’s star map, Psi Velorum is the only star that appears around that location if we filter out stars with absolute magnitude <img src="https://latex.codecogs.com/png.latex?%3E%204">.</p></div></div><p>The distances and lines drawn also make sense. For example, in Fish’s interpretation, one might wonder why the aliens do not connect 82 G. Eridani or Tau Ceti to Sol/our Sun given that they are right beside each other. In my interpretation, Van Maanen 2 is actually in a different direction to Tau Ceti (it is above Tau Ceti and GJ 1005, you can see it in the video above), and so it’s not surprising that the aliens drew the lines to them separately.</p>
<p>This interpretation however, would place the aliens’ origin at <a href="https://en.wikipedia.org/wiki/GJ_1005">GJ 1005</a> (or Gliese 1005), a binary red dwarf system<sup>12</sup>. As far as I am aware, there are no candidate exoplanets on GJ 1005 as of the writing of this post, but it is not uncommon for red dwarfs to have some.</p>
<div class="no-row-height column-margin column-container"><div id="fn12"><p><sup>12</sup>&nbsp;Finally somewhere more mundane. I mean why do all the aliens in Ufology lore always have to coincidentally come from some named star systems?</p></div></div><p>I also did not account for how likely it is for an alien species to visit these star systems, e.g., I didn’t check if they are variable stars or close binaries or what not which Fish excluded. However, these stars are all quite close to each other, and there aren’t many stars in the vicinity of these routes for the aliens to “skip” or be “uninterested by” like in Fish’s interpretation.</p>
<p><strong>It is important to note that the point here is not to present what I think is the “correct” interpretation of Betty Hill’s star map. Instead, the point is that one can easily find multiple interpretations that resembles it.</strong></p>
<p>In other words, it’s pointless to examine the star map to try to figure out where the aliens come from.</p>
</section>
</section>
<section id="conclusion" class="level1 page-columns page-full">
<h1>Conclusion</h1>
<p>In conclusion, even if we were to be extremely generous and accept that:</p>
<ol type="1">
<li>The UFO that the Hills encountered is an alien craft.</li>
<li>The Hills were abducted by the aliens.</li>
<li>Hypnotic regression is reliable in recovering these abduction memories that were repressed by the aliens.</li>
<li>Betty Hill remembered the star map to a reasonable accuracy while under hypnosis.</li>
<li>Betty Hill (who claimed she’s not good with perspective) drew the star map to a reasonable accuracy while under hypnosis.</li>
</ol>
<p><strong>We still cannot conclude anything from the star map given the large number of possible different interpretations it can lead to.</strong></p>
<p>Carl Sagan was right that if one can pick and choose from a large number of stars from any vantage point, then one can always find a constellation of stars that resembles the star map. We demonstrated this for randomly generated stars, and provided an example using stars in our local stellar neighborhood.</p>
<p>The fact that Fish, Atterberg, Koch and Kyborg<sup>13</sup>, and me, each have our own interpretation of the star map further supports this argument. While Fish only considered a small subset of stars that are Sun-like, we now know that the many red dwarfs in our local stellar neighborhood can host exoplanets, and thus greatly increase the number of possible interpretations.</p>
<div class="no-row-height column-margin column-container"><div id="fn13"><p><sup>13</sup>&nbsp;The Koch-Kyborg interpretation actually placed the star map in our Solar System, i.e., the objects in the map are our planets and some large asteroids, but my point still stands.</p></div></div><p>But what’s with the association between Grey aliens and the Zeta Reticuli star system from the various (supposedly) independent sources then? Especially since the Fish’s interpretation failed to reproduce the triangle formation on the left of Betty Hill’s star map.</p>
<p>I think there are 3 possible explanations:</p>
<ol type="1">
<li><p>These sources are just parroting each other. A lot of these “independent” sources share the same “lore”, e.g., in addition to Greys from Zeta Reticuli, they also have <a href="https://en.wikipedia.org/wiki/Reptilian_conspiracy_theory">Reptilians from Alpha Draconis</a>, taller Greys from Orion, and human-looking <a href="https://en.wikipedia.org/wiki/Nordic_aliens">Nordics</a> or Tall Whites from the Pleiades, Lyra, Arcturus, etc.<sup>14</sup></p></li>
<li><p>The Grey aliens are really from Zeta Reticuli, and it’s a remarkable coincidence that Fish’s interpretation of the star map shows Zeta Reticuli as the home system of the Hills’ abductors.</p></li>
<li><p>These aliens are conducting a psyop on us to hide their real origins. Recall that the “leader” alien who abducted the Hills, as well as the “Tall White” alien of the Charles Hall story, seems evasive and dodged the question when asked about their origins (I’m only half joking here).</p></li>
</ol>
<div class="no-row-height column-margin column-container"><div id="fn14"><p><sup>14</sup>&nbsp;Isn’t it a little sus that not only are these aliens human-looking, they are also often described to be attractive by our 21st century standards?</p></div></div><p>Anyway, this is just a fun excuse for me to play with Blender, and I am by no means a UFO investigator, nor am I extremely well-read into this story or Ufology “lore”.</p>
<p>Though, considering that there were multiple inconsistencies with the aliens in Betty’s account of the abduction while under hypnosis, e.g., the aliens not knowing what “older”, “age”, and even “yellow” meant despite being able to speak English and communicate telepathically, my opinion is that the recovered memories from hypnotic regression are most likely confabulations or false memories<sup>15</sup>. I believe false memories were also what Dr.&nbsp;Simon concluded after the multiple hypnosis sessions he conducted with the Hills.</p>


<div class="no-row-height column-margin column-container"><div id="fn15"><p><sup>15</sup>&nbsp;Again, I remind that such methods were never proven to be reliable in recovering lost or repressed memories.</p></div></div></section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>programming</category>
  <category>fun</category>
  <category>fringe</category>
  <guid>https://jianweicheong.codeberg.page/posts/betty-hill-star-map.html</guid>
  <pubDate>Wed, 16 Jul 2025 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Useful tools for the academic</title>
  <link>https://jianweicheong.codeberg.page/posts/tools-academic.html</link>
  <description><![CDATA[ 




<p>Throughout my time in academia, there are many instances where I witnessed the quickness of my colleagues in picking up and gaining proficiency in some new skills or tools that serves to enhance their work.</p>
<p>These not only include new domain knowledge, e.g., learning machine learning to solve a niche problem, but also tools that aids in their work. The regnant <a href="https://en.wikipedia.org/wiki/LaTeX">LaTeX</a> need no introduction, and picking up C/C++ to speed up computation or learning <a href="https://en.wikipedia.org/wiki/Git">Git</a> for collaborative work are quite common.</p>
<p>However, it seems to me that many are satisfied in their “local minima”, and do not have the time or effort to look for new tools that might enhance their work. Therefore, here I introduce some tools that I found to be useful that I think more academics should use<sup>1</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;This list might be updated as more tools prove themselves useful.</p></div></div><section id="pandoc" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="pandoc">Pandoc</h2>
<p><a href="https://pandoc.org/">Pandoc</a> is a <em>universal document converter</em>. It can convert MS Word to and from LaTeX, an HTML page to EPUB, or MS PowerPoint to HTML, and many more! However, the most popular feature of the universal converter is the ability to write in <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> and convert it to a document or a presentation slide.</p>
<p>Here, we write in simple Markdown and convert to a PDF document via LaTeX<sup>2</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;We can also convert to presentation slides via LaTeX beamer (or <a href="https://revealjs.com/">reveal.js</a>): <a href="../media/posts/tools-academic/pandoc_beamer.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://jianweicheong.codeberg.page/media/posts/tools-academic/pandoc_beamer.png" class="img-fluid"></a></p></div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../media/posts/tools-academic/pandoc.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Markdown is much easier to write as compared to LaTeX."><img src="https://jianweicheong.codeberg.page/media/posts/tools-academic/pandoc.png" class="img-fluid figure-img" alt="Markdown is much easier to write as compared to LaTeX."></a></p>
<figcaption>Markdown is much easier to write as compared to LaTeX.</figcaption>
</figure>
</div>
<p>For a long time I have used Pandoc for all my write-ups, notes, and presentation slides due to the simplicity of writing Markdown over LaTeX, MS Word, and MS PowerPoint<sup>3</sup>, but I have since moved to better tools below.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;Combined with wrangling data in Python/Julia/R over MS Excel, I have completely ditched MS Office.</p></div></div></section>
<section id="quarto" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="quarto">Quarto</h2>
<p>Coming from the lovely R community and building on top of Pandoc, <a href="https://quarto.org/">Quarto</a> is the successor to <a href="https://rmarkdown.rstudio.com/">R Markdown</a>, an attempt at <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a>. R Markdown does the same as Pandoc, allowing one to write in Markdown and outputs to documents and presentations etc., with the exception that it also allows one to run and output R code inside the document. Quarto extends this functionality to include Python, Julia, and Observable in addition to R.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/posts/tools-academic/qmd-how-it-works.png" class="img-fluid figure-img"></p>
<figcaption>Reprinted from <a href="https://quarto.org/docs/get-started/hello/vscode.html#how-it-works">Quarto’s tutorial</a>.</figcaption>
</figure>
</div>
<p>This functionality allows us to mix computation with its documentations, explanations, or mathematics in the same document.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../media/posts/tools-academic/quarto.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="The output of the code appears in the output document!"><img src="https://jianweicheong.codeberg.page/media/posts/tools-academic/quarto.png" class="img-fluid figure-img" alt="The output of the code appears in the output document!"></a></p>
<figcaption>The output of the code appears in the output document!</figcaption>
</figure>
</div>
<p>This allows for reproducible research where the codes and outputs are contained in the same research write-up, and is perfect for cases where one wants to share technical reports complete with implementation details to a colleague.</p>
<p>But this is not all! Even without using the ability to run code in your documents, Quarto can still do <a href="https://quarto.org/docs/gallery/">a lot more</a>, e.g., writing books, creating dashboards for data science, or creating web apps to interact with data<sup>4</sup>. One can also publish to <a href="https://quartopub.com/">Quarto Pub</a> to share their Quarto documents easily.</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;In fact, this very website is written in Quarto!</p></div></div></section>
<section id="typst" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="typst">Typst</h2>
<p><a href="https://typst.app/">Typst</a> is a modern typesetting system that aims to be an alternative to LaTeX. Fast, easy, sensible, with an actual scripting language, and actively developed, it has completely replaced LaTeX for me except for papers that are submitted for publication<sup>5</sup>. I even made a conference poster recently with Typst<sup>6</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;As far as I am aware, <a href="https://typst.app/blog/2025/typst-at-ijimai">IJIMAI is the only journal that accept Typst</a> at this point of time.</p></div><div id="fn6"><p><sup>6</sup>&nbsp;The package <a href="https://typst.app/universe/package/peace-of-posters">peace-of-posters</a> can be used to easily create posters. <a href="../media/posts/tools-academic/poster_dde2025.svg" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://jianweicheong.codeberg.page/media/posts/tools-academic/poster_dde2025.svg" class="img-fluid"></a></p></div></div><p>Not only does Typst has a simple Markdown-like syntax, it is also extremely fast, allowing almost instant live previews while typing.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="../media/posts/tools-academic/typst.webm" class="img-fluid" controls=""><a href="../media/posts/tools-academic/typst.webm">Video</a></video></p>
<figcaption>Live preview in Typst.</figcaption>
</figure>
</div>
<p>Typst also has an active <a href="https://typst.app/universe/">package ecosystem</a>, from drawing diagrams with <a href="https://typst.app/universe/package/cetz/">CeTZ</a>, creating presentation slides with <a href="https://typst.app/universe/package/touying/">Touying</a>, drawing quantum circuits with <a href="https://typst.app/universe/package/quill">Quill</a>, to plotting with <a href="https://typst.app/universe/package/lilaq">Lilaq</a>, Typst covers my entire workflow. My research notes that I share with my colleagues are written in Typst, I make diagrams in Typst, and I make worksheets for students in Typst.</p>
<p>Typst has also gained enough popularity that Pandoc and Quarto now supports it as a PDF backend in place of LaTeX. It even comes preinstalled in Quarto. Unlike LaTeX, there are almost no wait time in compiling a document, and error messages are not cryptic, making Typst a good PDF backend for Quarto<sup>7</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;Take a look at the talks <a href="https://www.youtube.com/watch?v=t30sqFch2v0">“Never again in outer par mode”</a> from Posit Conference 2023 and <a href="https://www.youtube.com/watch?v=2DbuqYKOsrY">“Styling Quarto PDFs with Typst”</a> from SatRdays London 2024, where they discusses the advantages of using Typst over LaTeX in Quarto</p></div></div></section>
<section id="an-rss-feed-reader" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="an-rss-feed-reader">An RSS feed reader</h2>
<p>You most likely have come across this little orange icon <img src="https://upload.wikimedia.org/wikipedia/en/thumb/4/43/Feed-icon.svg/20px-Feed-icon.svg.png" class="img-fluid"> in your time on the internet. In fact, there is one at the top right of this very site (though it’s not orange). This is <a href="https://en.wikipedia.org/wiki/RSS">RSS</a> (Really Simple Syndication), a standardized format to aggregate news or contents into a single feed.</p>
<p>Imagine having a single feed where you can read articles from multiple sources such as news websites, right when they are published. This is not an uncommon concept as some smartphones such as the iPhone provides such features with their news app. So how is this useful for academics?</p>
<p>Well, turns out journals typically provide a link to subscribe to their RSS feed too. One can then easily keep up with current research in journals relevant to their fields by aggregating them into a single RSS feed reader.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../media/posts/tools-academic/rss1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="The RSS feed reader Newsraft showing new published papers in Physical Review Letters."><img src="https://jianweicheong.codeberg.page/media/posts/tools-academic/rss1.png" class="img-fluid figure-img" alt="The RSS feed reader Newsraft showing new published papers in Physical Review Letters."></a></p>
<figcaption>The RSS feed reader <a href="https://codeberg.org/newsraft/newsraft">Newsraft</a> showing new published papers in Physical Review Letters.</figcaption>
</figure>
</div>
<p>I check the feed every day, reading through the titles, and then the abstracts for titles that caught my attention. If I find the paper interesting or relevant, I can easily open the paper on a browser with a single hotkey to download or add it to my bibliography manager.</p>
<p>I am subscribed to 11 journals, totaling to around 50 to 100 new papers everyday (arXiv takes up the bulk of this number), a number that is small enough that it’s not a hassle to go through the feed every day<sup>8</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;I’m also subscribed to some news site and even some YouTube channels, eliminating the need for an account.</p></div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../media/posts/tools-academic/rss2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Reading the abstract of an arXiv paper in Newsraft."><img src="https://jianweicheong.codeberg.page/media/posts/tools-academic/rss2.png" class="img-fluid figure-img" alt="Reading the abstract of an arXiv paper in Newsraft."></a></p>
<figcaption>Reading the abstract of an arXiv paper in <a href="https://codeberg.org/newsraft/newsraft">Newsraft</a>.</figcaption>
</figure>
</div>
<p>Given how important keeping up with current developments in the field is for a researcher, an RSS feed reader (and there are many) makes the aggravating task of checking for new papers effortless, and greatly increases one’s exposure to current research.</p>
</section>
<section id="marimo-over-jupyter" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="marimo-over-jupyter">Marimo over Jupyter</h2>
<p>Here’s a bonus one.</p>
<p>I take the somewhat popular yet controversial opinion that Jupyter notebooks are a scourge to scientific research. There are some annoying issues, such as how it’s saved as JSON instead of plain Python files, and how it teaches bad programming practices and habits to scientists. The latter can easily compound with carelessness to lead to invisible bugs and mistakes that produce wrong results, which might even end up in published research<sup>9</sup>!</p>
<div class="no-row-height column-margin column-container"><div id="fn9"><p><sup>9</sup>&nbsp;I haven’t encounter many researchers who actually write <a href="https://en.wikipedia.org/wiki/Unit_testing">unit tests</a> for their spaghetti code function.</p></div></div><p>But much more troubling is the fact that Jupyter notebooks increase the chances of making these mistakes due to the creation of hidden states. In fact, a study showed that out of over 800 000+ valid notebooks on GitHub, only ~24% are executed without errors, and only ~4% produced the same results <span class="citation" data-cites="PimentelJupyter2019">(Pimentel et al. 2019)</span>.</p>
<p>Perhaps this warrant a separate post<sup>10</sup>, but in short, if one wants to present some results with their corresponding codes, use Quarto, and if one really require a notebook environment, use <a href="https://marimo.io/">Marimo</a>, an alternative to Jupyter notebooks (only for Python).</p>
<div class="no-row-height column-margin column-container"><div id="fn10"><p><sup>10</sup>&nbsp;For now, take a look at <a href="https://www.youtube.com/watch?v=7jiPeIFXb6U">this talk</a> from JupyterCon 2018 to understand some of the problems with Jupyter notebooks, as well as this <a href="https://docs.marimo.io/faq/#what-problems-does-marimo-solve">FAQ from Marimo</a>.</p></div></div><p>The main difference between Marimo notebooks and Jupyter notebooks is the fact that the former is <em>reactive</em>. What this means is that Marimo notebooks always run in the correct order and always rerun the entire notebook on edits, eliminating the hidden states that plagues Jupyter notebooks.</p>
<p>If a code cell defining a variable is deleted, but the variable is used elsewhere, an error will be thrown. On the other hand, Jupyter notebooks continue to sneakily use that variable even when the programmer meant to remove it from the program.</p>
<p>A researcher should be aware of how certain shortcomings of their tools can be detrimental to their work, and should be open to finding alternatives or engage in self-improvement to eliminate them to minimize bad research outputs.</p>
<p>For example, learning to write properly unit tested functions instead of spaghetti codes, or learning to use type hinting in Python (which has been around since version 3.5) to pair with type checkers to minimize invisible bugs caused by carelessness that can lead to wrong published results.</p>



</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-PimentelJupyter2019" class="csl-entry">
Pimentel, Joao Felipe, Leonardo Murta, Vanessa Braganholo, and Juliana Freire. 2019. <span>“A Large-Scale Study about Quality and Reproducibility of Jupyter Notebooks.”</span> In <em>2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)</em>. IEEE. <a href="https://doi.org/10.1109/msr.2019.00077">https://doi.org/10.1109/msr.2019.00077</a>.
</div>
</div></section></div> ]]></description>
  <category>software</category>
  <guid>https://jianweicheong.codeberg.page/posts/tools-academic.html</guid>
  <pubDate>Sat, 07 Jun 2025 16:00:00 GMT</pubDate>
</item>
<item>
  <title>An honest explanation of quantum computing</title>
  <link>https://jianweicheong.codeberg.page/posts/quantum-computing.html</link>
  <description><![CDATA[ 




<p>We have all heard it before:</p>
<div class="page-columns page-full"><blockquote class="blockquote">
<p>“It’s doing all possible computations simultaneously!”<br>
“A quantum bit can be both 0 and 1 at the same time!”<br>
“Quantum computers compute in parallel universes!”<sup>1</sup></p>
</blockquote><div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;I’m shocked that this is <a href="https://blog.google/technology/research/google-willow-quantum-chip/">no longer an exaggeration</a>.</p></div></div></div>
<p>I get it, it’s difficult to talk about quantum mechanics without resorting to technical jargon, forcing us to rely on analogies that barely make sense.</p>
<p>But I mean, if it’s doing multiple computations simultaneously (in parallel universes or not), how many computations (or parallel universes) is it exactly?</p>
<p>And we can already do computations in “parallel universes” with conventional computers. Its called multithreading and multiprocessing.</p>
<p>So does that mean that I can achieve the same advantage in principle if I simply match the number of conventional computers to the number of parallel universes?</p>
<p>You see, these popular explanations for how a quantum computer works are typically a gross simplification that fails when probed a little. The fact that they even exist in the first place surprises me because <strong>the concepts behind quantum computing is actually quite simple</strong>.</p>
<p>Yes, that’s right. I believe that the basics of quantum computing is simple enough that any reasonable layperson can understand it.</p>
<p>The mystique only arises when we conflate the metaphysical interpretations of quantum mechanics<sup>2</sup> with the explanations of the quantum computations that they can perform. This is akin to explaining classical computation with some metaphysical interpretation of the nature of electricity, e.g., “The reason your computer can calculate 1+1 is because electricity running in your computer can flow on top of each other and thus adds up.” which is not what happens at all.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;To be fair, these interpretations of quantum mechanics are indeed weird and mind-blowing. But again, no matter how weird electricity is, classical computer science is independent of it. Quantum computing should be viewed the same way. Also keep in mind that these are just interpretations with no evidence of being true.</p></div></div><p>So what exactly is this simple concept behind quantum computing?</p>
<p>It’s a sphere.</p>
<section id="enters-the-bloch-sphere" class="level1 page-columns page-full">
<h1>Enters the Bloch sphere</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/posts/quantum-computing/bloch.svg" class="img-fluid figure-img"></p>
<figcaption>The Bloch sphere with an arrow inside pointing outwards from the center.</figcaption>
</figure>
</div>
<p>This is called a <a href="https://en.wikipedia.org/wiki/Bloch_sphere">Bloch sphere</a>, and it captures everything about a qubit (even all the alleged parallel universes).</p>
<p>Anyone can understand and visualize a sphere, so it puzzles me as to why we do not start with this instead of parallel universes or “being 0 and 1 at the same time”. The Bloch sphere is also mathematically accurate. That is, it’s not an analogy, it’s the truth!</p>
<p>In fact, the Bloch sphere also captures classical computing. The familiar logical 0 and 1 bits from classical computing are at the North and the South poles, respectively. In a conventional computer, imagine a bunch of these spheres with an arrow in each pointing only to either the North pole (bit 0) or the South pole (bit 1).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/posts/quantum-computing/bits.svg" class="img-fluid figure-img"></p>
<figcaption>8 Bloch spheres representing a sequence of 8 classical bits.</figcaption>
</figure>
</div>
<p>During a classical computation, the arrows simply flip between the North and the South poles, most of the time conditioned on other arrows of other spheres<sup>3</sup>. The sequence of arrows then represents the results of the computation.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;E.g., a <a href="https://en.wikipedia.org/wiki/Inverter_(logic_gate)">NOT operation</a> flips 0 (North) to 1 (South) and 1 (South) to 0 (North)</p></div></div><p>What about a qubit?</p>
<p>Well, we simply free the arrow such that it is able to point to anywhere on the sphere. That’s it. Where the arrow points is the <em>state</em> of the qubit.</p>
<p>So when people say a qubit can be “0 and 1 at the same time”, what they actually mean is that the arrow is pointing somewhere between the North (0) and the South (1) poles. Typically this is at the equator, halfway between the poles.</p>
<p>Of course, there is not just one location on the equator of a sphere. Singapore is at the equator, so is Ecuador, and so are multiple other countries on Earth. This means that two qubits that are “0 and 1 at the same time” can be different. To differentiate them (figure out where their arrows point), or to pinpoint a location on Earth, we require two coordinates, the latitude, and the longitude.</p>
<p>Since the Bloch sphere is also a sphere, the “latitude” and the “longitude” are two variables (or degrees of freedom) that also defines a qubit: <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> the “latitude”, and <img src="https://latex.codecogs.com/png.latex?%5Cvarphi"> the “longitude” also known as the relative phase.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/posts/quantum-computing/qubits.svg" class="img-fluid figure-img"></p>
<figcaption>8 Bloch spheres representing a sequence of 8 qubits.</figcaption>
</figure>
</div>
<p>So what happens during a quantum computation?</p>
<p>Well, like the classical case, the arrow in each qubit simply jumps (or rotates) around to and from any point on the sphere<sup>4</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;In general, this is done by performing unitary operations (literally rotations) on it. Typically, these operations can be described by simpler <a href="https://en.wikipedia.org/wiki/Quantum_logic_gate">quantum logic gates</a> like the logic gates in the classical case.</p></div></div><p>So all these talks of a quantum computer being able to perform computations faster because of “superposition” or because it can performs computation “simultaneously” etc., simply refers to the fact that there is an increase in the degrees of freedom for the computation as compared to classical digital computations.</p>
<p>In other words, this freedom for the arrow (its state) to rotate and point to anywhere on the sphere, allows certain computing tasks to require less operations (flipping or rotating of arrows), than if the arrows are confined to the North and South poles.</p>
<blockquote class="blockquote">
<p>“But what’s with all the weirdness of quantum physics then?”</p>
</blockquote>
<p>It’s true that in actual quantum systems that implements a qubit, there are typically two preferred states (the North and South poles of our Bloch sphere). These are sometimes called <a href="https://en.wikipedia.org/wiki/Quantum_Darwinism"><em>pointer states</em></a>. We observes these preferred states in our classical world as they are what remains after the quantum system loses its <a href="https://en.wikipedia.org/wiki/Quantum_decoherence"><em>coherence</em></a>. But in reality, the quantum system sees no difference between these preferred states and any other states it could take (e.g., at the equator of our Bloch sphere).</p>
<p>Since we only observes these preferred states (and that our macroscopic reality is built out of them), we deemed them as “natural” which led to these apparent weirdness, e.g., how can something that takes the “natural” states of spin up and spin down, be placed in the “unintuitive” state of “spin up and spin down at the same time”?</p>
<p>So there are some credence to the weirdness and hype. However, again, just like how the computer science of classical computation is independent of the physics of electricity and semiconductors (or their interpretations) etc., the computer science of quantum computation should also be seen as separate from the interpretations of what’s happening in the physical systems that implements them.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Extra notes
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The attentive reader will notice that a sphere is spherically symmetric. Just like on the Earth, there are no real ups and downs except for those defined by convention.</p>
<p>What this means is that we can orient the Bloch sphere however we want. Pick any two points at opposite ends of the sphere and we can define that as the 0 and 1. The reason the North and the South poles are defined as the 0 and 1 is simply convention.</p>
<p>Now that you know this, you should realize that the idea that a qubit being “both 0 and 1 at the same time” somehow grants an advantage is quite silly, since it’s just another point on the sphere, no different from the North (0) and the South (1) poles.</p>
<p>A more attentive reader will also ask “what about the insides of the sphere?”.</p>
<p>The reader is right. There is actually a third degree of freedom: the “radius”, which describes the length of the arrow. So yes, the arrow can point to somewhere inside the sphere. These are called <em>mixed states</em>, whereas arrows that point to the surface of the sphere are called <em>pure states</em>.</p>
<p>During a quantum computation, the qubit is sensitive to thermal noises that rotate the arrow in a manner that is undesired. These noises also shortens the arrow’s length to some fixed point inside the sphere depending on the temperature, in a process known as <a href="https://en.wikipedia.org/wiki/Quantum_decoherence"><em>decoherence</em></a>. This is why (depending on the implementation) quantum computers need to be kept at a very cold temperature, so that they can perform computations before they eventually reach the fixed point inside the sphere.</p>
</div>
</div>
</div>
</section>
<section id="entanglement-the-actual-spice" class="level1 page-columns page-full">
<h1>Entanglement — the actual spice</h1>
<p>The Bloch sphere might reminds one of analog computers, where quantities can take a continuum of values instead of the 0s and 1s in digital computers. In fact, if we can build an analog computer with two degrees of freedom like the Bloch sphere, then it can function exactly like a single qubit.</p>
<p>The “quantumness” only comes in if we include the concept of <em>entanglement</em><sup>5</sup>. Entanglement is the main spice that makes quantum systems special, preventing it from being replicated by classical systems, e.g., the analog computer with two degrees of freedom.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;Entanglement is often conflated with the phrase “<em>spooky action at a distance</em>”. The latter describes the apparent nonlocal collapse of the wave function. <span class="citation" data-cites="EinsteinEPR1935">Einstein, Podolsky, and Rosen (1935)</span> used entanglement as an example to illustrate the significance of this nonlocal collapse, which eventually led to this conflation.</p></div></div><p>Imagine what would happen if we have two qubits.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/posts/quantum-computing/bloch2.svg" class="img-fluid figure-img"></p>
<figcaption>Two Bloch spheres.</figcaption>
</figure>
</div>
<p>One might think that there are now six variables to describe the pair of qubits (where both arrows point) since we now have two Bloch spheres<sup>6</sup>. However, this is only true if there is no correlation between the pair of qubits, that is, the two arrows are independent of each other.</p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;If you thought the number is four instead, take a look at the <strong>Extra notes</strong> above.</p></div></div><p>Typically, when the two qubits interact with each other (or undergo quantum computations together), they can become entangled, which means that their two arrows (their states) are now correlated in a way that is impossible to achieve classically.</p>
<p>This is akin to them becoming a single (hyper)sphere with a single arrow pointing at some point that represents their combined state. The dimension of this (hyper)sphere will be the number of variables or degrees of freedom required to describe them.</p>
<p>Quite surprisingly, there can be a total of up to 15 degrees of freedom!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jianweicheong.codeberg.page/media/posts/quantum-computing/bloch15.svg" class="img-fluid figure-img"></p>
<figcaption>It’s impossible to draw a 15 dimensional sphere, so here’s a fun visual instead.</figcaption>
</figure>
</div>
<p>Six variables describe the two qubits independently (three for each), while the remaining nine describes how they are correlated to each other.</p>
<p>It is important to note that this single 15 dimensional Bloch (hyper)sphere describes both qubits together, and it cannot be broken down into separate descriptions for each qubit (without losing information about the entanglement). This means that the two entangled qubits can only be described as single object.</p>
<p>This is the stark feature of quantum systems that sets it apart from classical systems. Supposed that we were to build two analog computers with three degrees of freedom each to simulate the two Bloch spheres, before attempting to correlate their states (perhaps by performing some joint operations on them). We can never correlate them to the extent that entanglement could<sup>7</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;For classical correlations (no entanglement), they can be represented as a weighted sum of multiple pairs of independent Bloch spheres. These are called <a href="https://en.wikipedia.org/wiki/Separable_state"><em>separable states</em></a>.</p></div></div><p>In addition to the increased degrees of freedom, this increased correlation gained by entanglement can also be exploited in various quantum computational tasks.</p>
</section>
<section id="is-that-it" class="level1 page-columns page-full">
<h1>Is that it?</h1>
<p>Yep, that’s it.</p>
<p>Quantum computation is simply the rotations of these arrows on/in Bloch spheres<sup>8</sup>. While classical computing is confined to flipping between the North and South poles, quantum computing allows arrows to freely rotate anywhere on the Bloch sphere.</p>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;With some caveats like the fact that we can’t determine where the arrows point (read-out of the state) directly, which we did not touch upon.</p></div></div><p>Where the arrows point and how they rotate is how we store and process information, just like how a sequence of North and South poles (0s and 1s) and how they flip, encodes, and processes information in the classical case.</p>
<p>By combining multiple qubits, the allowable space or degrees of freedom for this information processing increases. Combined with entanglement, this information processing can take place in even higher dimensional space, with some algorithms exploiting the increased correlation.</p>
<p>The main “essence” of quantum computing is this change in computing paradigm, regardless of whether quantum systems that implement it do so with the help of parallel universes or not.</p>
<p>Again, I want to emphasize the separation between the implementation’s physics (and its interpretation), and this new computing paradigm that grants these advantages over classical computing.</p>
<p>The difficulty of course, is coming up with algorithms that not only can utilize the increased degrees of freedom, but also can be better or faster than the classical case. It turns out however, that classical computing (being confined to the North and South poles) is good enough in most cases, and quantum algorithms that can be better are rare.</p>
<p>This might be because in classical digital computing, how we encode and process information are quite straightforward, and decades of creating higher abstractions means that no programmers are flipping individual bits. However, in the relatively young field of quantum computation, physicists are still concerned with the individual operations or rotations to perform on individual or groups of qubits.</p>
<p>Perhaps one day quantum computing will reach the same status as classical computing. But for now, we are stuck with rotating arrows.</p>



</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-EinsteinEPR1935" class="csl-entry">
Einstein, A., B. Podolsky, and N. Rosen. 1935. <span>“Can Quantum-Mechanical Description of Physical Reality Be Considered Complete?”</span> <em>Physical Review</em> 47 (10): 777–80. <a href="https://doi.org/10.1103/physrev.47.777">https://doi.org/10.1103/physrev.47.777</a>.
</div>
</div></section></div> ]]></description>
  <category>physics</category>
  <guid>https://jianweicheong.codeberg.page/posts/quantum-computing.html</guid>
  <pubDate>Fri, 10 Jan 2025 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Life as an entropic conspiracy</title>
  <link>https://jianweicheong.codeberg.page/posts/life-conspiracy.html</link>
  <description><![CDATA[ 




<section id="the-right-question-to-ask" class="level1 page-columns page-full">
<h1>The right question to ask</h1>
<blockquote class="blockquote">
<p>“What is the meaning of life?”</p>
</blockquote>
<p>This question has become quite a cliché, with an equally cliché answer of:</p>
<blockquote class="blockquote">
<p>“It’s whatever you make it out to be!”</p>
</blockquote>
<p>that has become the norm.</p>
<p>I believe the reason why such a cop-out answer is the norm is because deep down, we all understand that life has no intrinsic objective meaning<sup>1</sup>. In fact, given that the prerequisite for the concept of “meaning” to exist in the first place is the existence of life itself, this question seems rather like a trick question.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Sans whatever religious/spiritual beliefs that one might have.</p></div><div id="fn2"><p><sup>2</sup>&nbsp;e.g., the aforementioned religious/spiritual beliefs.</p></div></div><p>Similar to how a system cannot demonstrate its own consistency in Gödel’s second incompleteness theorem, perhaps one must require a framework that is external to life itself to apply “meaning” for life’s existence, before life’s existence<sup>2</sup>.</p>
<p>Nevertheless, by replacing the quite human term of “meaning” with a more mechanistic term like “purpose”, we might be able to answer more reasonably the resulting question of:</p>
<div class="page-columns page-full"><blockquote class="blockquote">
<p>“What is the <strong>purpose</strong> of life?”<sup>3</sup></p>
</blockquote><div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;The term “purpose” might still be quite “agentic”, in the sense that it might mislead one into thinking that life has some agency over its own evolution based on some sense of purpose that it has. I assure that this is not what this post is about.</p></div></div></div>
</section>
<section id="a-physicists-perspective-the-conspiracy" class="level1 page-columns page-full">
<h1>A Physicist’s perspective — the conspiracy</h1>
<p>The study of life is typically assumed to fall under the domain of Biology. However, physicists have also been attempting to uncover a physical principle that leads to life’s emergence and its behaviors <span class="citation" data-cites="PrigogineBiological1971">(Prigogine and Nicolis 1971)</span>. A hint lies in the stark difference between life and inanimate matter: life’s ability to efficiently absorb or consume useful energy and dissipating it as heat, resulting in increased entropy production.</p>
<p>While this have been pointed out by Erwin Schrödinger in his seminar book <a href="https://en.wikipedia.org/wiki/What_Is_Life%3F"><em>What is life?</em></a> back in the 1940s, it has undergone rigorous thermodynamic treatment in recent years, thanks to advances in the physics of non-equilibrium thermodynamics <span class="citation" data-cites="CollinVerification2005 MichaelianThermodynamic2011">(Collin et al. 2005; K. Michaelian 2011)</span>.</p>
<p>In short, in the presence of an external non-equilibrium energy source (like the Sun), systems adapt and self-organize themselves to better absorb energy and dissipate heat or entropy. This process has come to be known as <em>dissipation-driven adaptation</em> <span class="citation" data-cites="EnglandStatistical2013 PerunovStatistical2016">(England 2013; Perunov, Marsland, and England 2016)</span>.</p>
<p>Life is hypothesized to be such a dissipative system that serves to increase entropy production.</p>
<p>From the birth of planetoids in the dusts of protoplanetary disks to the formation of vortices we see in chaotic turbulent flows such as hurricanes. Stable structures with low internal entropy arise out of such chaotic interactions in order to more efficiently dissipate entropy.</p>
<p>Life might be one of such order out of chaos, a long-running, universe-scale conspiracy to increase the entropy of the cosmos.</p>
<section id="self-organization-order-out-of-chaos" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="self-organization-order-out-of-chaos">Self-organization — order out of chaos</h2>
<p>Self-organization of complex structures in the presence of an external energy source have been demonstrated both experimentally and computationally. In a computational simulation involving 20 particles in a simplified chemical space, complex bonding patterns emerged under resonance with a periodic drive, increasing the rate of work absorption and heat dissipation <span class="citation" data-cites="KachmanSelfOrganized2017">(Kachman, Owen, and England 2017)</span>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../media/posts/life-conspiracy/kondepudi.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Reprinted from @KondepudiEnddirected2015"><img src="https://jianweicheong.codeberg.page/media/posts/life-conspiracy/kondepudi.png" class="img-fluid figure-img" alt="Reprinted from Kondepudi, Kay, and Dixon (2015)"></a></p>
<figcaption>Reprinted from <span class="citation" data-cites="KondepudiEnddirected2015">Kondepudi, Kay, and Dixon (2015)</span></figcaption>
</figure>
</div>
<p>Setup and result of self-organizing conducting beads.</p>
</div></div><p>Experimentally, conducting beads 4mm in diameter immersed in oil in a petri dish were shown to self-organize to a complex, tree-like structure when subjected to a high voltage. This occurred at a critical point and was accompanied by a spike in entropy dissipation <span class="citation" data-cites="KondepudiEnddirected2015">(Kondepudi, Kay, and Dixon 2015)</span>. Silver nanorods were also observed to self-organized in the presence of a doughnut-shaped laser source, with resulting structures depending on the wavelengths and polarization of the laser source <span class="citation" data-cites="ItoSelective2013">(Ito et al. 2013)</span>.</p>
<p>Likewise, by considering UVC light of 230nm to 270nm from the Sun as the non-equilibrium energy source (a range of wavelengths that were most intense in the early Earth), it was demonstrated that RNA polymers could proliferate via photochemical reactions, and that DNA polymers would denature from absorption and dissipation at these UVC wavelengths. These are crucial steps for self-replication without enzymes <span class="citation" data-cites="MichaelianMicroscopic2017 MichaelianUVC2019">(Karo Michaelian 2017; Karo Michaelian and Padilla 2019)</span>.</p>
<p>Homochirality in DNA and RNA was also shown to be achieved via photochemical reactions with UVC wavelengths light <span class="citation" data-cites="MichaelianHomochirality2018">(Karo Michaelian 2018)</span>. Correlations also exist between the maximum absorbance wavelengths of early life’s nucleobases and amino acids, and UVC wavelengths <span class="citation" data-cites="MichaelianFundamental2015">(K. Michaelian and Simeonov 2015)</span>.</p>
<p>These findings suggest that in the RNA world during early Earth era, RNA or pre-RNA polymers may have self-organized or adapted to efficeintly absorb and dissipate UVC solar spectrum, a prime example of dissipative adaptation in the emergence of life.</p>
</section>
<section id="self-replication-the-more-the-merrier" class="level2">
<h2 class="anchored" data-anchor-id="self-replication-the-more-the-merrier">Self-replication — the more the merrier</h2>
<p>Clearly, the more dissipators there are in a system, the greater the overall entropic dissipation. It’s therefore unsurprising that complex systems can self-replicate to increase entropy dissipation.</p>
<p>In fact, even the act of self-replication itself can serves to dissipate heat, e.g., it was shown that <em>E. coli</em> bacteria dissipate at least 5 times as much heat during replication compared to individual heat dissipation <span class="citation" data-cites="EnglandStatistical2013">(England 2013)</span>.</p>
<p>The process of DNA replication (copolymerisation) also dissipates entropy depending on the information entropy of the DNA polymer. Information creation decreases the Shannon entropy of the polymer and generates mutual information with the original. In the process, entropy is dissipated to the environment as quantified by the affinity per copied nucleotide <span class="citation" data-cites="AndrieuxNonequilibrium2008">(Andrieux and Gaspard 2008)</span>.</p>
<p>In general, various dissipative systems exhibit self-replication behaviors. For example, computer simulations of colloidal clusters show that the exponential growth rates of self-replication varies with the energy landscape of the system <span class="citation" data-cites="ZeravcicSelfreplicating2014">(Zeravcic and Brenner 2014)</span>.</p>
<p>Three-dimensional vortices also self-replicates in rotating shear flows, as demonstrated in a numerical study <span class="citation" data-cites="MarcusThreeDimensional2013">(Marcus et al. 2013)</span>. This was also proposed to be how planetoids form in protoplanetary disks <span class="citation" data-cites="BarrancoThreeDimensional2005">(Barranco and Marcus 2005)</span>, whereby the larger system can replicate smaller dissipative systems in it, or eventually split into a copy or more of itself, i.e., disk fragmentation that forms binary star systems <span class="citation" data-cites="OffnerFormation2010">(Offner et al. 2010)</span>.</p>
<p>Given these observations, one might hypothesize that early organic compounds evolved the ability to self-replicate as a means to ensure the constant presence of entropy dissipating structures, driving the emergence and evolution of life.</p>
</section>
<section id="adaptation-resonance-with-the-environment" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="adaptation-resonance-with-the-environment">Adaptation — resonance with the environment</h2>
<p>If life indeed self-organizes to more efficiently absorb external energy sources and dissipate heat, we would expect it to adapt or change its structures in response to changes in those energy sources over time.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="../media/posts/life-conspiracy/michaelian.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Reprinted from @MichaelianFundamental2015"><img src="https://jianweicheong.codeberg.page/media/posts/life-conspiracy/michaelian.png" class="img-fluid figure-img" alt="Reprinted from K. Michaelian and Simeonov (2015)"></a></p>
<figcaption>Reprinted from <span class="citation" data-cites="MichaelianFundamental2015">K. Michaelian and Simeonov (2015)</span></figcaption>
</figure>
</div>
<p>Correlations between solar spectrum and the emergence of organic compounds and cells in the five different periods. As Earth’s conditions changes, more complex organic compounds evolved to suit these conditions. The general trends are a shift from UVC absorbing to visible spectrum absorbing compounds, and a shift to oxygen based respiration.</p>
</div></div><p>This seems to be evident throughout life’s history, where its evolution has underwent avalanche dynamics with quick and sudden changes in complexity rather than smooth and gradual evolution <span class="citation" data-cites="PaczuskiAvalanche1996">(Paczuski, Maslov, and Bak 1996)</span>. Some even modeled these sudden transitions of evolution as a Big Bang model with “evolutionary inflation” akin to the cosmological inflation model <span class="citation" data-cites="KooninBiological2007">(Koonin 2007)</span>. Simulated artificial life have also demonstrated how the fitness or how the population adapts to the environment, can undergo multiple discontinuous jumps <span class="citation" data-cites="AdamiSelforganized1995">(Adami 1995)</span>.</p>
<p>Correlating Earth’s historical environmental changes (like solar spectrum, temperature, and atmospheric compositions) with organic compounds’ emergence and evolution shows that life has consistently adapted to better survive and absorb energy according to the prevailing condition in that period <span class="citation" data-cites="MichaelianFundamental2015">(K. Michaelian and Simeonov 2015)</span>.</p>
<p>An interesting example is the case of adenosine triphosphate (ATP) synthase, an enzyme that lies along the cell membrane of a cell that breaks down ATP to adenosine diphosphate (ADP) and a phosphate. This breakage releases energy that powers the cell.</p>
<p>Using a kinetic model of the ATP synthase process reveals that both its entropy production and the Shannon entropy of the transitional states, are maximized at a catalytic dwell angle<sup>4</sup> consistent with the actual ATP synthase’s angle, indicating that the ATP synthase evolved to optimize entropy production <span class="citation" data-cites="DewarFunctional2006">(Dewar, Juretić, and Županović 2006)</span>.</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;The ATP synthase rotates in angles of <img src="https://latex.codecogs.com/png.latex?120%5E%7B%5Ccirc%7D"> for each ATP to ADP + P<img src="https://latex.codecogs.com/png.latex?_i"> reaction. However, at the moment of breakage of ATP bonds to ADP + P<img src="https://latex.codecogs.com/png.latex?_i">, the synthase will pause for a short amount of time of around 2ms <span class="citation" data-cites="UenoATP2005">(Ueno et al. 2005)</span>. The angle at which this pause happens is known as the catalytic dwell.</p></div><div id="fn5"><p><sup>5</sup>&nbsp;One should keep in mind that none of these results were shown for complex life such as us humans, and one should not have the illusion that this hints at some sort of “<a href="https://en.wikipedia.org/wiki/Lamarckism">Lamarckism</a>”.</p></div></div><p>These findings suggest that the process of self-organization to an external energy source is an ongoing, dynamic phenomenon that continues in response to changing conditions.<sup>5</sup></p>
</section>
</section>
<section id="the-purpose-of-life" class="level1">
<h1>The purpose of life</h1>
<p>So why does the universe favors orders such as life, rather than simply maintaining the disorder that we might expect?</p>
<p>As discussed, it turns out that these eddies of order and low entropy pockets of the universe such as life, are but a small price for the universe to pay to optimize the production of entropy in the long run.</p>
<p>In other words, contrary to what one might expect, the presence of stable complex structures such as life produces more entropy in the system than if these structures were absent.</p>
<p>So it seems that the conspiracy of life is an entropic one.</p>
<p>This long-running conspiracy is but an attempt to speed up and maximize the production of entropy and disorder. The universe has set aside a small part of itself for us, masquerading as an exception to the Second Law of thermodynamics, but is in fact a testament of its power.</p>
<p>This is the purpose of life, the unwitting servitude as an agent of entropy.</p>



</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-AdamiSelforganized1995" class="csl-entry">
Adami, C. 1995. <span>“Self-Organized Criticality in Living Systems.”</span> <em>Physics Letters A</em> 203 (1): 29–32. <a href="https://doi.org/10.1016/0375-9601(95)00372-a">https://doi.org/10.1016/0375-9601(95)00372-a</a>.
</div>
<div id="ref-AndrieuxNonequilibrium2008" class="csl-entry">
Andrieux, David, and Pierre Gaspard. 2008. <span>“Nonequilibrium Generation of Information in Copolymerization Processes.”</span> <em>Proceedings of the National Academy of Sciences</em> 105 (28): 9516–21. <a href="https://doi.org/10.1073/pnas.0802049105">https://doi.org/10.1073/pnas.0802049105</a>.
</div>
<div id="ref-BarrancoThreeDimensional2005" class="csl-entry">
Barranco, Joseph A., and Philip S. Marcus. 2005. <span>“Three‐dimensional Vortices in Stratified Protoplanetary Disks.”</span> <em>The Astrophysical Journal</em> 623 (2): 1157–70. <a href="https://doi.org/10.1086/428639">https://doi.org/10.1086/428639</a>.
</div>
<div id="ref-CollinVerification2005" class="csl-entry">
Collin, D., F. Ritort, C. Jarzynski, S. B. Smith, I. Tinoco, and C. Bustamante. 2005. <span>“Verification of the Crooks Fluctuation Theorem and Recovery of RNA Folding Free Energies.”</span> <em>Nature</em> 437 (7056): 231–34. <a href="https://doi.org/10.1038/nature04061">https://doi.org/10.1038/nature04061</a>.
</div>
<div id="ref-DewarFunctional2006" class="csl-entry">
Dewar, R. C., D. Juretić, and P. Županović. 2006. <span>“The Functional Design of the Rotary Enzyme ATP Synthase Is Consistent with Maximum Entropy Production.”</span> <em>Chemical Physics Letters</em> 430 (1–3): 177–82. <a href="https://doi.org/10.1016/j.cplett.2006.08.095">https://doi.org/10.1016/j.cplett.2006.08.095</a>.
</div>
<div id="ref-EnglandStatistical2013" class="csl-entry">
England, Jeremy L. 2013. <span>“Statistical Physics of Self-Replication.”</span> <em>The Journal of Chemical Physics</em> 139 (12). <a href="https://doi.org/10.1063/1.4818538">https://doi.org/10.1063/1.4818538</a>.
</div>
<div id="ref-ItoSelective2013" class="csl-entry">
Ito, Syoji, Hiroaki Yamauchi, Mamoru Tamura, Shimpei Hidaka, Hironori Hattori, Taichi Hamada, Keisuke Nishida, et al. 2013. <span>“Selective Optical Assembly of Highly Uniform Nanoparticles by Doughnut-Shaped Beams.”</span> <em>Scientific Reports</em> 3 (1). <a href="https://doi.org/10.1038/srep03047">https://doi.org/10.1038/srep03047</a>.
</div>
<div id="ref-KachmanSelfOrganized2017" class="csl-entry">
Kachman, Tal, Jeremy A. Owen, and Jeremy L. England. 2017. <span>“Self-Organized Resonance During Search of a Diverse Chemical Space.”</span> <em>Physical Review Letters</em> 119 (3). <a href="https://doi.org/10.1103/physrevlett.119.038001">https://doi.org/10.1103/physrevlett.119.038001</a>.
</div>
<div id="ref-KondepudiEnddirected2015" class="csl-entry">
Kondepudi, Dilip, Bruce Kay, and James Dixon. 2015. <span>“End-Directed Evolution and the Emergence of Energy-Seeking Behavior in a Complex System.”</span> <em>Physical Review E</em> 91 (5). <a href="https://doi.org/10.1103/physreve.91.050902">https://doi.org/10.1103/physreve.91.050902</a>.
</div>
<div id="ref-KooninBiological2007" class="csl-entry">
Koonin, Eugene V. 2007. <span>“The Biological Big Bang Model for the Major Transitions in Evolution.”</span> <em>Biology Direct</em> 2 (1): 21. <a href="https://doi.org/10.1186/1745-6150-2-21">https://doi.org/10.1186/1745-6150-2-21</a>.
</div>
<div id="ref-MarcusThreeDimensional2013" class="csl-entry">
Marcus, Philip S., Suyang Pei, Chung-Hsiang Jiang, and Pedram Hassanzadeh. 2013. <span>“Three-Dimensional Vortices Generated by Self-Replication in Stably Stratified Rotating Shear Flows.”</span> <em>Physical Review Letters</em> 111 (8). <a href="https://doi.org/10.1103/physrevlett.111.084501">https://doi.org/10.1103/physrevlett.111.084501</a>.
</div>
<div id="ref-MichaelianThermodynamic2011" class="csl-entry">
Michaelian, K. 2011. <span>“Thermodynamic Dissipation Theory for the Origin of Life.”</span> <em>Earth System Dynamics</em> 2 (1): 37–51. <a href="https://doi.org/10.5194/esd-2-37-2011">https://doi.org/10.5194/esd-2-37-2011</a>.
</div>
<div id="ref-MichaelianMicroscopic2017" class="csl-entry">
Michaelian, Karo. 2017. <span>“Microscopic Dissipative Structuring and Proliferation at the Origin of Life.”</span> <em>Heliyon</em> 3 (10): e00424. <a href="https://doi.org/10.1016/j.heliyon.2017.e00424">https://doi.org/10.1016/j.heliyon.2017.e00424</a>.
</div>
<div id="ref-MichaelianHomochirality2018" class="csl-entry">
———. 2018. <span>“Homochirality Through Photon-Induced Denaturing of RNA/DNA at the Origin of Life.”</span> <em>Life</em> 8 (2): 21. <a href="https://doi.org/10.3390/life8020021">https://doi.org/10.3390/life8020021</a>.
</div>
<div id="ref-MichaelianUVC2019" class="csl-entry">
Michaelian, Karo, and Norberto Santillán Padilla. 2019. <span>“UVC Photon-Induced Denaturing of DNA: A Possible Dissipative Route to Archean Enzyme-Less Replication.”</span> <em>Heliyon</em> 5 (6): e01902. <a href="https://doi.org/10.1016/j.heliyon.2019.e01902">https://doi.org/10.1016/j.heliyon.2019.e01902</a>.
</div>
<div id="ref-MichaelianFundamental2015" class="csl-entry">
Michaelian, K., and A. Simeonov. 2015. <span>“Fundamental Molecules of Life Are Pigments Which Arose and Co-Evolved as a Response to the Thermodynamic Imperative of Dissipating the Prevailing Solar Spectrum.”</span> <em>Biogeosciences</em> 12 (16): 4913–37. <a href="https://doi.org/10.5194/bg-12-4913-2015">https://doi.org/10.5194/bg-12-4913-2015</a>.
</div>
<div id="ref-OffnerFormation2010" class="csl-entry">
Offner, Stella S. R., Kaitlin M. Kratter, Christopher D. Matzner, Mark R. Krumholz, and Richard I. Klein. 2010. <span>“THE FORMATION OF LOW-MASS BINARY STAR SYSTEMS VIA TURBULENT FRAGMENTATION.”</span> <em>The Astrophysical Journal</em> 725 (2): 1485–94. <a href="https://doi.org/10.1088/0004-637x/725/2/1485">https://doi.org/10.1088/0004-637x/725/2/1485</a>.
</div>
<div id="ref-PaczuskiAvalanche1996" class="csl-entry">
Paczuski, Maya, Sergei Maslov, and Per Bak. 1996. <span>“Avalanche Dynamics in Evolution, Growth, and Depinning Models.”</span> <em>Physical Review E</em> 53 (1): 414–43. <a href="https://doi.org/10.1103/physreve.53.414">https://doi.org/10.1103/physreve.53.414</a>.
</div>
<div id="ref-PerunovStatistical2016" class="csl-entry">
Perunov, Nikolay, Robert A. Marsland, and Jeremy L. England. 2016. <span>“Statistical Physics of Adaptation.”</span> <em>Physical Review X</em> 6 (2). <a href="https://doi.org/10.1103/physrevx.6.021036">https://doi.org/10.1103/physrevx.6.021036</a>.
</div>
<div id="ref-PrigogineBiological1971" class="csl-entry">
Prigogine, I., and G. Nicolis. 1971. <span>“Biological Order, Structure and Instabilities.”</span> <em>Quarterly Reviews of Biophysics</em> 4 (2–3): 107–48. <a href="https://doi.org/10.1017/s0033583500000615">https://doi.org/10.1017/s0033583500000615</a>.
</div>
<div id="ref-UenoATP2005" class="csl-entry">
Ueno, Hiroshi, Toshiharu Suzuki, Kazuhiko Kinosita, and Masasuke Yoshida. 2005. <span>“ATP-Driven Stepwise Rotation of f o f 1 -ATP Synthase.”</span> <em>Proceedings of the National Academy of Sciences</em> 102 (5): 1333–38. <a href="https://doi.org/10.1073/pnas.0407857102">https://doi.org/10.1073/pnas.0407857102</a>.
</div>
<div id="ref-ZeravcicSelfreplicating2014" class="csl-entry">
Zeravcic, Zorana, and Michael P. Brenner. 2014. <span>“Self-Replicating Colloidal Clusters.”</span> <em>Proceedings of the National Academy of Sciences</em> 111 (5): 1748–53. <a href="https://doi.org/10.1073/pnas.1313601111">https://doi.org/10.1073/pnas.1313601111</a>.
</div>
</div></section></div> ]]></description>
  <category>physics</category>
  <category>philosophy</category>
  <guid>https://jianweicheong.codeberg.page/posts/life-conspiracy.html</guid>
  <pubDate>Tue, 30 Apr 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Haskell for numerical computation?</title>
  <link>https://jianweicheong.codeberg.page/posts/haskell-numerical.html</link>
  <description><![CDATA[ 




<section id="why-haskell" class="level1 page-columns page-full">
<h1>Why Haskell?</h1>
<p>Recently, I have been experimenting with <a href="https://en.wikipedia.org/wiki/Haskell">Haskell</a> which I find to be quite enjoyable to program in, thanks to its unique programming paradigm. So much so that I am considering using it for numerical computations in my research.</p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside"><strong>Side-effects</strong> refers to having an effect on the “outside world” such as printing a string to terminal or writing to a file etc. Of course, we do want some side-effects for the program to do anything useful. In Haskell, side-effects are handled by <a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)">monads</a>, which is a beast of a topic on its own. Monads allow the pure and impure (side-effects) to be clearly separated in Haskell.</span></div></div>
<p>Haskell (named after logician <a href="https://en.wikipedia.org/wiki/Haskell_Curry">Haskell Curry</a>) is a purely functional programming language in the mathematical sense. Every function in Haskell simply takes an input and returns an output—nothing more, nothing less. It cannot mutate variables, and it cannot produce <strong><em>side-effects</em></strong>.</p>
<p>Purely functional programming languages are typically declarative, i.e., one does not write step-by-step instructions like imperative languages such as Python, C, C++, etc. For example, there are no loops in Haskell; one has to rely on recursion or functions such as ‘fold’ and ‘scan’.</p>
<p>The two main reasons for my consideration to use it for numerical computations are:</p>
<ol type="1">
<li><p>Conciseness: Haskell’s declarative style greatly increase its conciseness. Prototyping and experimentation are frequent in computational research. Concise codes can reduce this programming time, and allow faster prototyping.</p></li>
<li><p>Safety and correctness: A small bug in numerical computational would not raise any error. Instead, it manifests in computed results or plots, masquerading as valid or even novel results. If these bugs are not identified, one might publish a paper with faux results.</p>
<ul>
<li>Haskell’s static typing can serve as an additional check to reduce bugs.</li>
<li>Its declarative approach means that codes are written in easily verifiable expressions, like in mathematics, rather than imperative statements that are often prone to bugs or human error.</li>
<li>Immutability and the absence of side-effects in functions can also reduce hidden bugs. For instance, the risk of a function modifying a variable without the coder’s knowledge is mitigated, and parallel computations are less likely to produce incorrect results due to variable mutations in multiple threads.</li>
</ul></li>
</ol>
<p>I am neither a software developer nor am I computer science trained, and so some technical aspects of the language might escape me. Therefore, in this article, we will only examine some simple examples to compare traditional imperative languages like Python with purely functional Haskell.</p>
</section>
<section id="some-examples" class="level1 page-columns page-full">
<h1>Some examples</h1>
<section id="sum-recursion" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="sum-recursion">Sum: recursion</h2>
<p>Ignoring the fact that the function <code>sum</code> is built-in in both Python and Haskell, let’s see how one might write a <code>sum</code> function that sum all the elements in a list.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(xs):</span>
<span id="cb1-2">    sum_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> xs:</span>
<span id="cb1-4">        sum_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> x</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sum_all</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> [] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>xs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> xs</span></code></pre></div>
</div>
</div>
</div>
<p>In the imperative Python example, we tell the program what to do step-by-step: first initialize an accumulator <code>sum_all</code> to 0, then loop through each elements in the list and add them to the accumulator.</p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">One might notice that functions are applied without parenthesis, i.e., applying a function <code>foo</code> on a variable <code>x</code>, is typically <code>foo(x)</code>, but would be <code>foo x</code> in Haskell. The reason for this has something to do with the concept of “currying” which we will see later.</span></div></div>
<p>On the other hand, in the declarative Haskell example, we state that the sum of a list is simply the first element <code>x</code> plus the sum of the rest of the elements <code>xs</code>. This will then carry on recursively. As with all recursive functions, we require a base case to end the recursion, which is specified by <code>sum [] = 0</code>, which states to return 0 if the input to <code>sum</code> is an empty list. This ability to define the <code>sum</code> function twice with <code>sum [] = 0</code> and <code>sum (x:xs) = x + sum xs</code>, is simply <a href="https://en.wikipedia.org/wiki/Pattern_matching">pattern matching</a>.</p>
<p>Finally, Haskell is statically typed, i.e., the types of the inputs and outputs of the function can be specified which in our case is <code>sum :: [Float] -&gt; Float</code>, which states that the function <code>sum</code> takes in a list of floats <code>[Float]</code> and returns a single float <code>Float</code>. This type declaration looks similar to how one might write <img src="https://latex.codecogs.com/png.latex?f:%20X%20%5Cto%20Y"> mathematically for a function <img src="https://latex.codecogs.com/png.latex?y%20=%20f(x)">, where <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20X">, and <img src="https://latex.codecogs.com/png.latex?y%5Cin%20Y">.</p>
</section>
<section id="tensor-product-reduction-and-accumulation" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="tensor-product-reduction-and-accumulation">Tensor product: reduction and accumulation</h2>
<p>Here is a common example in quantum information/computation, where we have some quantum states that are complex matrices, and we want to perform a tensor product on them so that we can operate on them collectively.</p>
<blockquote class="blockquote">
<p>Given a list of matrices, the function <code>tensor_all</code> returns the tensor product of all the elements of the list in sequence, e.g., given the list of matrices <img src="https://latex.codecogs.com/png.latex?Ms%20=%20%5BA,%20B,%20C%5D">, <code>tensor_all(Ms)</code> should return their tensor product <img src="https://latex.codecogs.com/png.latex?A%5Cotimes%20B%5Cotimes%20C">.</p>
</blockquote>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tensor_all(Ms):</span>
<span id="cb3-4">    tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> M <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Ms:</span>
<span id="cb3-6">        tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.kron(tensor_prod, M)</span>
<span id="cb3-7"></span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tensor_prod</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Numeric.LinearAlgebra</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">tensor_all ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span></span>
<span id="cb4-4">tensor_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foldl</span> kronecker <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
</div>
</div>
<p>Imperatively in the Python example, we loop through each element of the list and apply the tensor product (kronecker product <code>np.kron</code>) element-by-element with an accumulator, i.e., in the first loop we have <img src="https://latex.codecogs.com/png.latex?(1)%20%5Cotimes%20A">, in the second loop we have <img src="https://latex.codecogs.com/png.latex?(1%5Cotimes%20A)%20%5Cotimes%20B">, in the third loop we have <img src="https://latex.codecogs.com/png.latex?(1%5Cotimes%20A%20%5Cotimes%20B)%20%5Cotimes%20C">, and so on and so forth, where our accumulator <code>tensor_prod</code> is the value in the parenthesis, is initialized as <img src="https://latex.codecogs.com/png.latex?1">, and is updated every loop.</p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">Note we have used the <code>hmatrix</code> library which is imported by <code>import Numeric.LinearAlgebra</code>. <a href="https://pechersky.github.io/haskell-numpy-docs/">This documentation</a> is a good resource for a comparison between <code>hmatrix</code> and Python’s <code>numpy</code>.</span></div></div>
<p>In Haskell, it should be obvious that we can perform a recursion like the case for <code>sum</code>. However, here we introduced the function <code>foldl</code>, which stands for “fold left”. <code>foldl</code> takes in a binary function (in this case <code>kronecker</code>), the initial accumulator (in this case <code>1</code>), and a list (e.g., <code>[a, b, c]</code>). It then returns <code>kronecker(kronecker(kronecker(1, a), b), c)</code>. There is also <code>foldr</code>, or “fold right”, which instead returns <code>kronecker(a, kronecker(b, kronecker(c, 1)))</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Point-free style programming
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Note that in the Haskell example, we could have written the function as <code>tensor_all ms = foldl kronecker 1 ms</code>, where the input to the function, the list of matrices <code>ms</code>, is specified. However, since <code>ms</code> is simply the input to the corresponding functions on both sides of the expression, we can omit it and simply write <code>tensor_all = foldl kronecker 1</code>. This is referred to as <a href="https://en.wikipedia.org/wiki/Tacit_programming">point-free style programming</a>.</p>
</div>
</div>
</div>
<p>If instead, we want to “accumulate” the result of each loop into a list, i.e., we want the function to return <img src="https://latex.codecogs.com/png.latex?%5BA,%20A%20%5Cotimes%20B,%20A%5Cotimes%20B%5Cotimes%20C%5D">, then, in the Python example we have to append the accumulator <code>tensor_prod</code> in each loop into a list. On the other hand, in the Haskell example, we can simply replace <code>foldl</code> with <code>scanl</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tensor_all(Ms):</span>
<span id="cb5-4">    tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-5">    tensor_prod_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> M <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Ms:</span>
<span id="cb5-7">        tensor_prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.kron(tensor_prod, M)</span>
<span id="cb5-8">        tensor_prod_list.append(tensor_prod)</span>
<span id="cb5-9"></span>
<span id="cb5-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tensor_prod_list</span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">import</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Numeric.LinearAlgebra</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">tensor_all ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>]</span>
<span id="cb6-4">tensor_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scanl</span> kronecker <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
</div>
</div>
<p>Folds and scans are part and parcel of a functional programmer, and are common in functional programming languages, as well as <strong><em>array programming languages</em></strong>. Typically, they are referred to as reduction and accumulation, e.g., in the array programming languages NumPy, Julia, and R, folds and scans are called <code>reduce</code> and <code>accumulate</code>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://user-images.githubusercontent.com/36027403/193055974-8d8008a2-a1e6-4bd4-8ecc-7624fa611f25.png" class="imghover img-fluid figure-img"></p>
<figcaption>Image credit: <a href="https://codereport.github.io/">code_report</a></figcaption>
</figure>
</div>
<p>If you would like to know more about <strong><em>array languages</em></strong>, and how they compare to functional languages like Haskell, I highly recommend the youtube channel <a href="https://www.youtube.com/c/codereport">code_report</a>.</p>
</div></div></section>
<section id="collision-model-currying-and-laziness" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="collision-model-currying-and-laziness">Collision model: currying and laziness</h2>
<p>Let’s consider a less simple example to reveal more of Haskell’s features:</p>
<blockquote class="blockquote">
<p>A superconducting qubit <img src="https://latex.codecogs.com/png.latex?%5Crho"> (<code>rho</code>) is sensitive to heat, and is continuously undergoing a thermalization process. We can model this thermalization process with a collision model, where the qubit evolves via repeated “collision” with different qubits at each discrete time step for <img src="https://latex.codecogs.com/png.latex?n"> (<code>n</code>) number of time steps. The collision is implemented by the function <code>collision</code>. We want to determine how the von Neumann entropy of <img src="https://latex.codecogs.com/png.latex?%5Crho">, <img src="https://latex.codecogs.com/png.latex?S(%5Crho)">, changes in each collision up till <img src="https://latex.codecogs.com/png.latex?n"> time steps. The calculation of the von Neumann entropy is implemented by the function <code>entropy</code>.</p>
</blockquote>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">For completeness, the function <code>collision</code> performs the operation of <img src="https://latex.codecogs.com/png.latex?%0A%5Crho_%7Bt+1%7D%0A=%20%5Csum_i%20K_i%20%5Crho_t%20K_i%5E%5Cdagger,%0A"> where <img src="https://latex.codecogs.com/png.latex?K_i"> are Kraus operators, and the function <code>entropy</code> computes <img src="https://latex.codecogs.com/png.latex?%0AS%5Cleft(%5Crho_t%5Cright)%20=%20-%5Cmathrm%7BTr%7D%20%5Cleft(%5Crho_t%20%5Clog%20%5Crho_t%5Cright).%0A"> Therefore, what we want is simply the list of <img src="https://latex.codecogs.com/png.latex?%5Csmall%5BS(%5Crho_0),%20S(%5Crho_1),%20%5Cldots,%20S(%5Crho_%7Bn-1%7D)%5D"></span></div></div>
<p>This might look complicated if one does not know quantum mechanics. However, if we assume that the collision and entropy calculations are done for us in the functions <code>collision</code> and <code>entropy</code>, then we simply want a list of <code>n</code> entropy values, i.e., <code>entropy_list = [entropy(rho), entropy(collision(rho)), entropy(collision(collision(rho))),...]</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sp</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> collision(ks, rho):</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> k.conj().T <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ks])</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> entropy(rho):</span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.trace(rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> sp.linalg.logm(rho))</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_entropies(ks, rho, n):</span>
<span id="cb7-10">    entropy_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb7-12">        rho_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> entropy(rho)</span>
<span id="cb7-13">        entropy_list.append(rho_entropy)</span>
<span id="cb7-14">        rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collision(ks, rho)</span>
<span id="cb7-15"></span>
<span id="cb7-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> entropy_list</span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb8-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">collision ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span></span>
<span id="cb8-2">collision ks rho <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span> [k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> tr k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ks]</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">entropy ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span></span>
<span id="cb8-5">entropy rho <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> trace (rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> logm rho)</span>
<span id="cb8-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb8-7">    logm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> matFunc <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">calc_entropies ::</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> [<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Float</span>]</span>
<span id="cb8-10">calc_entropies ks rho n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> entropy rho_list</span>
<span id="cb8-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb8-12">    rho_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">iterate</span> (collision ks) rho)</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Extra things to note for the Haskell example
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p>Similar to Python, Haskell has list comprehension, which has a mathematical syntax as seen in the function <code>collision</code>, e.g.,</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb9-1">example <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> [p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ps, q <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> qs, p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<p>would give a list of the set <img src="https://latex.codecogs.com/png.latex?%5C%7Bpq%5C%20%7C%5C%20p%20%5Cin%20P,%5C%20q%20%5Cin%20Q,%5C%20p%20%5Cgeq%205,%5C%20q%20%5Cneq%200%20%5C%7D."></p>
<p>On the other hand, Python’s list comprehension is less concise:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">example <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ps <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> qs <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div></li>
<li><p>In the <code>entropy</code> and <code>calc_entropies</code> functions, we have used the <code>where</code> keyword, which allows us to break a function into smaller constituents, e.g.,</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb11-1">exampleFunc a b c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> d</span>
<span id="cb11-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb11-3">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb11-4">    d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span>
<span id="cb11-5">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb11-6">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c</span></code></pre></div>
<p>Alternatively, we can also use the <code>let</code> and <code>in</code> keyword:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb12-1">exampleFunc a b c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb12-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span></span>
<span id="cb12-3">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb12-4">    d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span>
<span id="cb12-5">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb12-6">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c</span>
<span id="cb12-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb12-8">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> d</span></code></pre></div></li>
</ul>
</div>
</div>
</div>
<p>The Python example, being imperative, should be self-explanatory. Instead, we are interested in the Haskell example, specifically the <code>calc_entropies</code> function, which might look arcane if one does not know common functional programming functions such as <code>map</code>, <code>take</code>, and <code>iterate</code>. Let’s look at this line-by-line.</p>
<section id="currying" class="level3">
<h3 class="anchored" data-anchor-id="currying">Currying</h3>
<p>The very first line of the <code>calc_entropies</code> function is the type signature of:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathtt%7Bcalc%5C_entropies%20::%20%5BMatrix%5C%20C%5D%5C%20-%3E%20Matrix%5C%20C%5C%20-%3E%20Int%5C%20-%3E%20%5BFloat%5D%7D%0A"></p>
<p>which states that the function <code>calc_entropies</code> takes in a list of complex matrix, a complex matrix, and an integer, and returns a list of floats. The list of complex matrix refers to the Kraus operators <img src="https://latex.codecogs.com/png.latex?K_i"> used in the <code>collision</code> function, the complex matrix refers to <code>rho</code> or <img src="https://latex.codecogs.com/png.latex?%5Crho">, the integer refers to <code>n</code>, while the list of floats refers to the output <code>entropy_list</code>.</p>
<p>One might notice that <code>[Matrix C] -&gt; Matrix C -&gt; Int -&gt; [Float]</code> doesn’t seem to make a clear distinction between inputs and outputs. This has to do with the concept of <strong><em>partial function application</em></strong>, or <a href="https://en.wikipedia.org/wiki/Currying"><strong><em>currying</em></strong></a> (also named after Haskell Curry).</p>
<p>Implicitly, what’s happening is the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathtt%7Bcalc%5C_entropies%20::%20%5BMatrix%5C%20C%5D%5C%20-%3E%5C%20%7D%20%5Cunderbrace%7B%5Cmathtt%7BMatrix%5C%20C%5C%20-%3E%20Int%5C%20-%3E%20%5BFloat%5D%7D%7D_%5Ctext%7Bfunction%20$f$%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%0Af%5C%20%5Cmathtt%7B::%20Matrix%5C%20C%5C%20-%3E%5C%20%7D%20%5Cunderbrace%7B%5Cmathtt%7BInt%5C%20-%3E%20%5BFloat%5D%7D%7D_%5Ctext%7Bfunction%20$g$%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%0Ag%5C%20%5Cmathtt%7B::%20Int%5C%20-%3E%20%5BFloat%5D%7D%0A"></p>
<p>where the function <code>calc_entropies</code> takes in <code>[Matrix C]</code> as its input, and returns a function <img src="https://latex.codecogs.com/png.latex?f"> as its output. The function <img src="https://latex.codecogs.com/png.latex?f"> then takes in <code>Matrix C</code> as the input and returns another function <img src="https://latex.codecogs.com/png.latex?g"> as the output. Finally, the function <img src="https://latex.codecogs.com/png.latex?g"> takes in <code>Int</code> as the input and returns <code>[Float]</code> as the final output. This means that functions in Haskell are indeed pure in that they only take in one input and one output, and any functions that appear to take in multiple inputs are in fact taking in only one input and returning a function that takes in also one input, and so on and so forth. This is called currying. Because of this, we can also apply the functions “partially”, for example:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb13-1">f a b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb13-2">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> f <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
<p>where we only provide one argument to <code>f</code> when it is expecting two, to create a new function <code>g</code>. This means that <code>f 5 10</code> and <code>g 10</code> would give the same output of <code>15</code>. Currying or partial function application can be a powerful tool for the abstraction and expressiveness of your code.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example of the usefulness of currying
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Unitary operations are common in quantum mechanics, and are how quantum computers perform computations on quantum states or qubits. They are defined as follows: <img src="https://latex.codecogs.com/png.latex?%0A%7C%5Cpsi'%5Crangle%20=%20U%20%7C%5Cpsi%5Crangle.%0A"></p>
<p>We can define a function <code>unitary_oper</code> to implement this.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-5-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-1" aria-controls="tabset-5-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-5-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-2" aria-controls="tabset-5-2" aria-selected="false">Haskell</a></li></ul>
<div class="tab-content">
<div id="tabset-5-1" class="tab-pane active" aria-labelledby="tabset-5-1-tab">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> unitary_oper(U, ket):</span>
<span id="cb14-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ket</span></code></pre></div>
</div>
<div id="tabset-5-2" class="tab-pane" aria-labelledby="tabset-5-2-tab">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb15-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">unitary_oper ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matrix</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">C</span></span>
<span id="cb15-2">unitary_oper u ket <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> ket</span></code></pre></div>
</div>
</div>
</div>
<p>There are many common unitaries <img src="https://latex.codecogs.com/png.latex?U"> used in quantum computations, referred to as <a href="https://en.wikipedia.org/wiki/Quantum_logic_gate">quantum logic gates</a>. For example there are the Pauli X gate and the Hadamard gate which are defined as <img src="https://latex.codecogs.com/png.latex?%0AX%20=%0A%5Cbegin%7Bpmatrix%7D%0A0%20&amp;%201%20%5C%5C%0A1%20&amp;%200%0A%5Cend%7Bpmatrix%7D,%5Cquad%0AH%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%7D%7D%0A%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20%5C%5C%0A1%20&amp;%20-1%0A%5Cend%7Bpmatrix%7D.%0A"></p>
<p>Currying or partial-function application allows us to easily define these new gate operations on top of the existing <code>unitary_oper</code> function:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb16-1">pauli_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unitary_oper (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb16-2">hadamard <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unitary_oper (cmap (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<p>We can then easily apply the Pauli X and Hadamard gates on a qubit <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle%20=%20%5B1,%200%5D%5ET"> with <code>pauli_x (2&gt;&lt;1) [1, 0]</code> and <code>hadamard (2&gt;&lt;1) [1, 0]</code>. This can make the code more concise and clearer.</p>
</div>
</div>
</div>
</section>
<section id="lazy-evaluation" class="level3">
<h3 class="anchored" data-anchor-id="lazy-evaluation">Lazy evaluation</h3>
<p>Moving on to the function itself:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode haskell code-with-copy"><code class="sourceCode haskell"><span id="cb17-1">calc_entropies ks rho n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span> entropy rho_list</span>
<span id="cb17-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<span id="cb17-3">    rho_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">take</span> n (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">iterate</span> (collision ks) rho)</span></code></pre></div>
<p>The first line features the function <code>map</code>, which is another part and parcel of the functional programmer. It simply apply a function to every element of a list:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderbrace%7B%5Cmathtt%7Bmap%5Cquad%20entropy%7D%7D_%5Ctext%7Bapply%20entropy%20function%20to%20each%20element%20of%7D%5Cquad%20%5Cmathtt%7Brho%5C_list%7D%0A"></p>
<p>and has the corresponding Python code of</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">entropy_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [entropy(rho) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rho <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rho_list]</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or alternatively</span></span>
<span id="cb18-4">entropy_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rho <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rho_list:</span>
<span id="cb18-6">    entropy_list.append(entropy(rho))</span></code></pre></div>
<p>Finally, in the last line we have</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathtt%7Bwhere%5Cquad%20rho%5C_list%7D%20="> <img src="https://latex.codecogs.com/png.latex?%0A%5Cunderbrace%7B%5Cmathtt%7Btake%5Cquad%20n%7D%7D_%5Ctext%7Btake%20first%20$n$%20of%7D%5Cquad%20%5Cunderbrace%7B%5Cmathtt%7B(iterate%5Cquad%20(collision%5Cquad%20ks)%5Cquad%20rho)%7D%7D_%5Ctext%7Breturns%20an%20infinite-sized%20list%20of%20%5Brho,%20collision(rho),%20collision(collision(rho)),...%5D%7D%0A"> which gives <code>rho_list = [rho, collision(rho), collision(collison(rho)),...]</code> up till <code>n</code> number of elements in the list.</p>
<p>Also note that we can reduce the number of parenthesis by using <code>$</code> instead, e.g., <code>rho_list = take n $ iterate (collision ks) rho</code>.</p>
<p>It might be quite surprising that the <code>iterate</code> function returns an infinite-sized list. For example, <code>iterate add1 10</code> gives <code>[11, 12, 13, 14, 15, ...]</code> to infinity, where the function <code>add1</code> is applied on <code>10</code> ad infinitum. If we were to write the corresponding Python code for <code>rho_list = take n (iterate (collision ks) rho)</code>, it might look something like</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">rhos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb19-3">    rhos.append(rho)</span>
<span id="cb19-4">    rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collision(ks, rho)</span>
<span id="cb19-5"></span>
<span id="cb19-6">rho_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rhos[:n]</span></code></pre></div>
<p>which runs forever and result in a list of infinite size. However, this is not a problem in Haskell, thanks to the fact that Haskell is <a href="https://en.wikipedia.org/wiki/Lazy_evaluation"><strong><em>lazy-evaluated</em></strong></a>. This means that Haskell only evaluate values when required, and so since we only require the first <code>n</code> elements of the infinite list, Haskell only evaluate that first <code>n</code> elements.</p>
<p>If this Python code is lazy-evaluated like in Haskell, one might imagine that the program looks ahead and saw that it only require the first <code>n</code> elements as stated in <code>rho_list = rhos[:n]</code>, and so it stops the <code>while True</code> loop after only running <code>n</code> times.</p>


</section>
</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>software</category>
  <category>programming</category>
  <guid>https://jianweicheong.codeberg.page/posts/haskell-numerical.html</guid>
  <pubDate>Mon, 04 Sep 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Why I recommend Fedora for new Linux users</title>
  <link>https://jianweicheong.codeberg.page/posts/why-fedora.html</link>
  <description><![CDATA[ 




<p>Here, I provide a list of reasons on why I think Fedora is a good starting point for new Linux users, which comes down to a single advantage: good defaults.</p>
<section id="semi-rolling-release" class="level1">
<h1>Semi-rolling release</h1>
<p>When you use your computer, here’s what you might expect:</p>
<ol type="1">
<li>You want all your programs to be updated to the latest versions.</li>
<li>You want the stuffs running in the background to be updated to the latest versions.</li>
<li>You don’t want major changes to your user experience or to how things are done.</li>
</ol>
<p>This is reasonable; you want frequent updates because you want the latest features, or security and bug fixes. But at the same time, you don’t want your desktop to completely change after an update (think Windows 7 to 8, or 10 to 11).</p>
<p>Fedora’s semi-rolling release cycle abide by these: you get frequent updates (including kernel updates), but some packages like the desktop environment GNOME, or major software decisions (like moving to a new technology), are only updated in a major version release that the user must initiate.</p>
</section>
<section id="wayland" class="level1">
<h1>Wayland</h1>
<p>Most Linux distros use <code>X11</code> as its windowing system (a program that handles how windows are drawn on your screen). However, <code>X11</code> does not have GUI isolation, allowing different programs to interact with one another. A malicious program can then record your screen, or log the keys you typed in your browser while you are logging in to your bank.</p>
<p><code>Wayland</code> is the successor to <code>X11</code>, and is developed with security in mind, isolating each window from one another.</p>
<blockquote class="blockquote">
<p>Unlike X, the Wayland input stack doesn’t allow applications to snoop on the input of other programs (preserving confidentiality), to generate input events that appear to come from the user (preserving input integrity), or to capture all the input events to the exclusion of the user’s application (preserving availability).</p>
<p>— <a href="https://lwn.net/Articles/589147/">Jake Edge, LWN.net</a></p>
</blockquote>
</section>
<section id="swap-on-zram" class="level1">
<h1>Swap on ZRAM</h1>
<p>Linux systems offers a “swap” space, where memory on the RAM can be copied to disk space, freeing the RAM in the process. Swap is an <a href="https://chrisdown.name/2018/01/02/in-defence-of-swap.html">important part</a> of a Linux operating system. However, sensitive information stored on RAM can be copied to disk, risking potential security issues. <code>ZRAM</code> solves these problems by having the swap space remain in the RAM with compression, ensuring that no sensitive information will be stored on disk.</p>
</section>
<section id="btrfs" class="level1">
<h1>Btrfs</h1>
<p>Most Linux distros have traditionally used the <code>ext4</code> filesystem. <code>btrfs</code> is a newer file system that offers advantages over <code>ext4</code>:</p>
<ul>
<li>Compression leads to less disk space used.</li>
<li>Compression also extends the lifespan of flash-based devices (SSDs, etc.).</li>
<li>Less likely to have data corruption.</li>
<li>Provides snapshots that allows rollback when system breaks.</li>
</ul>
<blockquote class="blockquote">
<p>For laptop and workstation installs of Fedora, we want to provide file system features to users in a transparent fashion. We want to add new features, while reducing the amount of expertise needed to deal with situations like running out of disk space. Btrfs is well adapted to this role by design philosophy, let’s make it the default.</p>
<p>…</p>
<p>The Btrfs community has users that have been using it for most of the past decade at scale. It’s been the default on openSUSE (and SUSE Linux Enterprise) since 2014, and Facebook has been using it for all their OS and data volumes, in their data centers, for almost as long. Btrfs is a mature, well-understood, and battle-tested file system, used on both desktop/container and server/cloud use-cases.</p>
<p>— <a href="https://fedoraproject.org/wiki/Changes/BtrfsByDefault">Fedora Project wiki, Btrfs changes proposal</a></p>
</blockquote>
</section>
<section id="selinux-and-firewalld" class="level1">
<h1>SELinux and firewalld</h1>
<p>Security Enhanced Linux (<code>SELinux</code>) provides Mandatory Access Control (MAC).</p>
<blockquote class="blockquote">
<p>In computer security, mandatory access control (MAC) refers to a type of access control by which the operating system or database constrains the ability of a subject or initiator to access or generally perform some sort of operation on an object or target.</p>
<p>— <a href="https://en.wikipedia.org/wiki/Mandatory_access_control">Wikipedia</a></p>
</blockquote>
<blockquote class="blockquote">
<p>Security Enhanced Linux (SELinux) provides an additional layer of system security. SELinux fundamentally answers the question: May &lt;subject&gt; do &lt;action&gt; to &lt;object&gt;?, for example: May a web server access files in users’ home directories?</p>
<p>— <a href="https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-selinux/">Fedora docs</a></p>
</blockquote>
<p>Fedora comes with good default policies for <code>SELinux</code>, as well as good default firewall rules with <code>firewalld</code>.</p>
</section>
<section id="flatpak-enabled" class="level1">
<h1>Flatpak enabled</h1>
<p><code>Flatpak</code> is supposed to be a new and universal way of installing programs. <code>Flatpak</code> is now available on almost all major distros and is also the most popular way of installing programs on the Steam Deck.</p>
<p>Ubuntu on the other hand, while often recommended to beginners, decided to <a href="https://discourse.ubuntu.com/t/ubuntu-flavor-packaging-defaults/34061?u=d0od">drop Flatpak</a> in favor of <code>snap</code>, which is their own alternative that is much less popular. <code>snap</code> packages <a href="https://askubuntu.com/questions/1185091/why-apt-package-chromium-browser-installs-snap-package-instead">masquerade as traditional packages</a>, which can cause confusion for new users. They also <a href="https://forum.snapcraft.io/t/sudo-snap-install-or-just-snap-install/3909">encourage users to sign up an Ubuntu One account</a> just to install <code>snap</code> packages without root.</p>
</section>
<section id="speed-of-adopting-new-technologies" class="level1">
<h1>Speed of adopting new technologies</h1>
<p>Fedora tends to adopt new technologies at a fast pace, such as <code>Wayland</code>, swap on <code>ZRAM</code>, <code>Flatpak</code>, <code>PipeWire</code>, <code>btrfs</code> etc. New technologies tends to offer improvements in terms of usability and security.</p>
<p>For example, Fedora adopted <code>Wayland</code> in 2016, but Ubuntu only done so in 2021. Even Red Hat Enterprise Linux (RHEL) and Debian adopted <code>Wayland</code> in 2019, earlier than Ubuntu, despite both being extremely conservative distros.</p>
</section>
<section id="whats-next" class="level1">
<h1>What’s next?</h1>
<p>If you just want a usable system with no interest in learning more about the Linux ecosystem, then I believe Fedora is the ideal choice. However, I do not encourage people to stay on Fedora for the rest of their Linux journey. Rather, one should try out different Linux distros and explore alternatives to learn more about the Linux ecosystem.</p>
<p>Eventually, as you gain more understanding of the Linux ecosystem, you will develop your own opinions on things. For example, you might be <a href="https://flatkill.org/2020/">against Flatpak</a>, or perhaps you might think that <a href="https://nosystemd.org/">systemd has major problems</a>. Regardless, the greatest strength of the Linux ecosystem is the power to make your own choices on what software and technologies you prefer.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>software</category>
  <category>linux</category>
  <guid>https://jianweicheong.codeberg.page/posts/why-fedora.html</guid>
  <pubDate>Fri, 31 Mar 2023 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
